* TODO outline-minor-mode

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
#+end_src

* TODO Buffer Move
  :PROPERTIES:
  :ID:       09433d16-46c7-4fe8-8708-9382a1270dc0
  :END:

#+begin_src emacs-lisp :tangle no
  ;; パッケージのインストール
  (setq package-list '(buffer-move))
  (dolist (package package-list)
    (when (not (package-installed-p package))
      (package-install package)))

  ; buffer-move : have to add your own keys
  (global-set-key (kbd "<C-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  'buf-move-right)
#+end_src

* TODO tab bar
  :PROPERTIES:
  :ID:       e4164ff6-d405-47f7-8ed7-838c9ffa215d
  :END:
#+begin_src emacs-lisp :tangle no
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; tabbar.el
  ;;
  ;; [Emacsにタブ機能を追加するtabbar.elの導入 - 12FF5B8](http://hico-horiuchi.hateblo.jp/entry/20121208/1354975316)

  ;; パッケージのインストール
  (setq package-list '(tabbar))
  (dolist (package package-list)
    (when (not (package-installed-p package))
      (package-install package)))

  (require 'tabbar)
  (tabbar-mode)
  (global-set-key "\M-]" 'tabbar-forward)  ; 次のタブ
  (global-set-key "\M-[" 'tabbar-backward) ; 前のタブ
  ;; タブ上でマウスホイールを使わない
  (tabbar-mwheel-mode nil)
  ;; グループを使わない
  (setq tabbar-buffer-groups-function nil)
  ;; 左側のボタンを消す
  (dolist (btn '(tabbar-buffer-home-button
		 tabbar-scroll-left-button
		 tabbar-scroll-right-button))
    (set btn (cons (cons "" nil)
		   (cons "" nil))))
#+end_src

* TODO rcode tools
  :PROPERTIES:
  :ID:       21e85321-7b0d-479f-aa36-66c3d9515adc
  :END:

#+begin_src emacs-lisp :tangle no
  (add-to-list 'load-path "~/.rbenv/versions/2.0.0-p195/lib/ruby/gems/2.0.0/gems/rcodetools-0.8.5.0")

  ;; rcodetools
  (require 'rcodetools)
  (setq rct-find-tag-if-available nil)
  (defun ruby-mode-hook-rcodetools ()
    (define-key ruby-mode-map (kbd "<C-return>") 'rct-complete-symbol)
    (define-key ruby-mode-map "\M-\C-i" 'rct-complete-symbol)
    (define-key ruby-mode-map "\C-c\C-t" 'ruby-toggle-buffer)
    (define-key ruby-mode-map "\C-c\C-d" 'xmp)
    (define-key ruby-mode-map "\C-c\C-f" 'rct-ri))
  (add-hook 'ruby-mode-hook 'ruby-mode-hook-rcodetools)

  (setq rct-get-all-methods-command "PAGER=cat fri -l")
  ;; See docs
#+end_src

* TODO 行番号表示

- 行番号表示をするとorg-modeが遅くなるらしい
  - [[http://stackoverflow.com/questions/5229705/emacs-org-mode-turn-off-line-numbers][Emacs Org-Mode: Turn off line numbers - Stack Overflow]]

#+begin_src emacs-lisp :tangle no
(global-linum-mode t)
(set-face-attribute 'linum nil :foreground "yellow" :height 0.8)
(setq linum-format "%4d")
#+end_src

* TODO Diff

- [[http://stackoverflow.com/questions/331569/diff-save-or-kill-when-killing-buffers-in-emacs]["Diff, save or kill" when killing buffers in Emacs - Stack Overflow]]

#+begin_src emacs-lisp :tangle no
(defadvice kill-buffer (around my-kill-buffer-check activate)
  "Prompt when a buffer is about to be killed."
  (let* ((buffer-file-name (buffer-file-name))
	 backup-file)
    ;; see 'backup-buffer
    (if (and (buffer-modified-p)
	     buffer-file-name
	     (file-exists-p buffer-file-name)
	     (setq backup-file (car (find-backup-file-name buffer-file-name))))
	(let ((answer (completing-read (format "Buffer modified %s, (d)iff, (s)ave, (k)ill? " (buffer-name))
				       '("d" "s" "k") nil t)))
	  (cond ((equal answer "d")
		 (set-buffer-modified-p nil)
		 (let ((orig-buffer (current-buffer))
		       (file-to-diff (if (file-newer-than-file-p buffer-file-name backup-file)
					 buffer-file-name
				       backup-file)))
		   (set-buffer (get-buffer-create (format "%s last-revision" (file-name-nondirectory file-to-diff))))
		   (buffer-disable-undo)
		   (insert-file-contents file-to-diff nil nil nil t)
		   (set-buffer-modified-p nil)
		   (setq buffer-read-only t)
		   (ediff-buffers (current-buffer) orig-buffer)))
		((equal answer "k")
		 (set-buffer-modified-p nil)
		 ad-do-it)
		(t
		 (save-buffer)
		 ad-do-it)))
      ad-do-it)))
#+end_src

#+RESULTS:
: kill-buffer

** ibuffer

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

* TODO newline-and-indent

− RET と C-m は同じ
- TODO C-jとの違いは？

#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-m") 'newline-and-indent)
#+end_src
