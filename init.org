# -*- org -*-
#+TITLE: init.org
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle init.el
#+PROPERTY: header-args            :results silent

* これはなに？
** 使い方
  - 日本のEmacsユーザ向け．
  - Emacsを設定するためのelです．
    - [[https://github.com/ychubachi/.emacs.d/blob/master/init.org][.emacs.d/init.org at master · ychubachi/.emacs.d]]
  - preludeを意識しています
    - [[http://batsov.com/prelude/][Prelude by bbatsov]]
  - コードネーム候補
    - aperitif 食前酒
  - oh-my-zshのようなplugins
    - [[https://github.com/robbyrussell/oh-my-zsh][robbyrussell/oh-my-zsh]]
  - C-c C-v t でinit.elを生成
    - [[http://orgmode.org/manual/Header-arguments-in-Org-mode-properties.html#Header-arguments-in-Org-mode-properties][Header arguments in Org mode properties - The Org Manual]]
  - daemonについて
  - 対応するEmacsのバージョンは24.3（2013-03-11公開版）以降です．
    - [[http://www.gnu.org/software/emacs/][GNU Emacs - GNU Project - Free Software Foundation (FSF)]]
    - [[http://www.gnu.org/software/emacs/news/NEWS.24.3]]
    - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding - GNU Emacs Lisp Reference Manual]]
    - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Closures.html#Closures][Closures - GNU Emacs Lisp Reference Manual]]

  - init.elについて
    - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File][Init File - GNU Emacs Manual]]
    - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Syntax.html#Init-Syntax][Init Syntax - GNU Emacs Manual]]
      - init fileの文法．
      - 特定の変数は自動的にbuffer localになる．
	- この場合はset-defaultを使うこと．

** カスタマイズ
  - custom.elを最後に読むので，ここでの設定を上書きできます．
  - custom.elはgitではignoreします．
  - Dropboxと連携したorg-modeとMobileOrgのための設定
  - [[http://d.hatena.ne.jp/a_bicky/20131230/1388396559][custom-set-variables は使わない方が良いかもしれない - あらびき日記]]
** 準備
*** git submodule
  - git submodule init
  - git submodule update
*** フォント
  - Ricty のインストール
*** aspell コマンドのインストール
  - git-commit-mode-hook でflyspellが自動的にonになる．
  - .aspell.conf の設定
    - [[http://sky-y.hatenablog.jp/entry/20091229/1262106336][YaTeX + aspell - 雲行きそらゆきココロイキ]]

  Error enabling Flyspell mode:
  (Error: No word lists can be found for the language "ja_JP".)

** TODOs
*** TODO custem-sample.elを作る
   :PROPERTIES:
   :ID:       82dac097-153d-4efc-88eb-ac6616df3b5a
   :END:
   - ファイルがなければコピーする
     - その際，問い合わせをする
*** TODO custom.elにある設定をこちらに移す（custom.elなしでもokにする）
    :PROPERTIES:
    :ID:       5aad65c8-d606-4d34-808d-9afaa5e638c0
    :END:
*** TODO org-insert-heading-respect-contentをC-jにする
    :PROPERTIES:
    :ID:       f9593ce6-203d-47a7-9342-fd602c193a0c
    :END:
    C-jはorg-return-indentにバインドされている
*** TODO [[http://www.emacswiki.org/emacs/UnitTesting][EmacsWiki: Unit Testing]]
    :PROPERTIES:
    :ID:       5cb66ace-65c3-4e01-9c1c-f25ae7008668
    :END:
*** TODO [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]]
    :PROPERTIES:
    :ID:       cd8617f9-5634-467f-9c14-ca657a802726
    :END:
*** TODO flyspell-modeでC-.がかちあう
    :PROPERTIES:
    :ID:       7af985a9-1630-4e8a-8202-3d434351c518
    :END:
*** TODO [[http://shibayu36.hatenablog.com/entry/2012/12/29/001418][年末emacs設定大掃除をして、これは捨てられないと思った設定書いてく - $shibayu36->blog;]]
    :PROPERTIES:
    :ID:       e010dd60-ee65-4042-9b16-9ae0f2681837
    :END:
*** TODO Qiitaに投稿できないか
    :PROPERTIES:
    :ID:       7cd92222-91c7-4c46-9325-85e891c20216
    :END:
*** TODO org-modeで候補をインラインにできないか
    :PROPERTIES:
    :ID:       0d60c33f-5d9b-4447-bf76-8344bf44471c
    :END:
*** TODO F1はssh時、ターミナルとかぶる
*** TODO [[http://www.fan.gr.jp/~ring/doc/elisp_19/elisp-jp_39.html][GNU Emacs Lispリファレンス・マニュアル: A. ヒントと標準的な作法]]
** 参考文献

 Emacs LISP テクニックバイブル

- p.31より

* 前処理
** ヘッダコメント

#+begin_src emacs-lisp :padline no
;; init.el --- Emacsの初期設定
#+end_src

** 開始の通知

#+begin_src emacs-lisp
 (message "%s" "%% Emacsの設定を開始します %%")
#+end_src

** 完了の通知
*** after-init-hookの設定
  - after-init-hookはパッケージの初期化が完了したら呼ばれるフックです．
    - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html#Init-File][Init File - GNU Emacs Lisp Reference Manual]]

*** カスタマイズ設定を保存するファイルの指定
  - 概要
     - カスタマイズ設定を保存するファイルを指定して，読み込みます．
       - custom.elには個人用の設定を書く
     - このコードで設定した値は，custom.el内で上書きすることができます．
     - after-init-hookでcustom.elを読みこませる理由
       - init.elでエラーが発生しても確実にカスタマイズ設定を読み込みます．
  - 参考
     - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Saving Customizations - GNU Emacs Manual]]

#+begin_src emacs-lisp
    (add-hook 'after-init-hook
	      (lambda ()
		(setq custom-file "~/.emacs.d/custom.el")
		(if (file-exists-p (expand-file-name custom-file))
		    (load (expand-file-name custom-file)))
		(message "%s" "%% custom.elを読み込みました %%")))
#+end_src

#+RESULTS:
| x-wm-set-size-hint | init-loader-show-log | (lambda nil (message %% Emacsの設定が完了しました %%)) |

** サーバー起動

- Emacs serverの開始
- Emacs 既に起動している場合は立ち上げない
  - [[http://stackoverflow.com/questions/5570451/how-to-start-emacs-server-only-if-it-is-not-started][configuration - How to start emacs server only if it is not started? - Stack Overflow]]

#+begin_src emacs-lisp
  (load "server")
  (unless (server-running-p)
    (server-start))
#+end_src

* Emacs本体が提供する機能の設定
  - 外部のパッケージに依存しない，標準的な設定を行います．
** ロードパスの設定

- normal-top-level-add-subdirs-to-load-path は
  default-directory の全てのサブディレクトリを load-path に追加する
  関数です．

- gitのsubmoduleとして管理するライブラリを追加します．

#+begin_src emacs-lisp
  (let ((default-directory "~/.emacs.d/git/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

- ソースコードて管理するライブラリを追加します．

#+begin_src emacs-lisp
  (let ((default-directory "~/.emacs.d/site-lisp/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

** バックアップ保存場所の設定                                      :files.el:
- 全てのファイルのバックアップを~/.emacs.d/data/backup/以下に保存します．
- この項目はcustom.elでも設定可能．

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
	(quote ((".*" "~/.emacs.d/data/backup/" t))))
  (setq backup-directory-alist
	(quote (("\\.*$" . "~/.emacs.d/data/backup"))))
#+end_src

#+RESULTS:
: ~/.emacs.d/data/bookmarks

** ブックマーク保存場所の設定					:bookmark.el:

- [[http://www.geocities.co.jp/SiliconValley-Bay/9285/EMACS-JA/emacs_74.html][GNU Emacsマニュアル: Bookmarks]]
- [[http://maruta.be/intfloat_staff/53][Emacs でファイルを素早く開く(その1) ～ bookmark, filecache ～ | イントフロート スタッフブログ]]

#+begin_src emacs-lisp
  (setq bookmark-default-file
	"~/.emacs.d/data/bookmarks")
#+end_src

** ファイルの自動再読み込み                                   :autorevert.el:
   Emacsの外でファイルが更新されたら，自動的にバッファを再読込する．

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** スタートアップスクリーン                                      :startup.el:

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

** 自動保存                                                      :startup.el:

#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix
	"~/data/auto-save-list/.saves-")
#+end_src

** カッコの対応を表示                                              :paren.el:

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

#+RESULTS:
: t

** 不要な行末の空白を削除                                     :whitespace.el:

- 保存する前に，不要な空白を取り除きます．
- 参考
  - [[http://batsov.com/articles/2011/11/25/emacs-tip-number-3-whitespace-cleanup/][Emacs Tip #3: Whitespace Cleanup - (think)]]
  - [[http://qiita.com/itiut@github/items/4d74da2412a29ef59c3a][Emacs - whitespace-modeを使って、ファイルの保存時に行末のスペースや末尾の改行を削除する - Qiita]]

#+begin_src emacs-lisp
  (add-hook 'before-save-hook
   'whitespace-cleanup)
#+end_src

#+RESULTS:
| auto-cleanup |

** フレームの表題                                                         :C:

| 変数名          | 内容                         |
|-----------------+------------------------------|
| menu-bar-mode   | メニューバーの表示           |
| tool-bar-mode   | ツールバーを表示             |
| scroll-bar-mode | スクロールバーの表示（位置） |

#+begin_src emacs-lisp
  (setq frame-title-format
	(format "%%f - Emacs@%s" (system-name)))
#+end_src

** 行番号・列番号をモードラインに表示                             :simple.el:

モードラインに(24, 20)といった形式で，カーソルのある行と列を表示します．

#+begin_src emacs-lisp
  (column-number-mode t)
#+end_src

#+RESULTS:
: t

** 時刻の表示                                                       :time.el:
- http://www.emacswiki.org/emacs/DisplayTime

モードラインの時刻を24時間表示にします．ロードアベレージは表示させません．

#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (display-time-mode 1)
#+end_src

#+RESULTS:

** コメントのフォントを立体にする                              :font-lock.el:
- [[http://ja.wikipedia.org/wiki/%E7%AB%8B%E4%BD%93%E6%B4%BB%E5%AD%97][立体活字 - Wikipedia]]

#+begin_src emacs-lisp
(custom-set-faces
 '(font-lock-comment-face ((t (:foreground "chocolate1" :slant normal)))))
#+end_src

** マウス操作                                                      :mouse.el:

マウスの中ボタンでペーストする位置を変更します．
標準ではクリックした位置にペーストされるので，
カーソルの位置にペーストするようにします．

#+begin_src emacs-lisp
  (setq mouse-yank-at-point t)
#+end_src

マウスでドラックした範囲をEmacsのクリップボードにコピーします．

#+begin_src emacs-lisp
  (setq mouse-drag-copy-region t)
#+end_src

** コンパイル                                                    :compile.el:

#+begin_src emacs-lisp
 (setq compilation-ask-about-save nil)
#+end_src

** アウトラインモードのプリフィックス                            :outline.el:

アウトラインマイナーモードのプリフィックスは，標準で C-c @ です．
これでは使いづらいので，変更します．

#+begin_src emacs-lisp
  (setq outline-minor-mode-prefix "")
#+end_src

** ファイル名のリネーム                                           :wdired.el:

diredモードで r キーを押すと編集モードに入る．
完了したらC-c C-cで決定．C-c ESCでキャンセル．

wdiredのrequireは，dired-mode-mapを定義するために必要

#+begin_src emacs-lisp
  (require 'wdired)
  (define-key dired-mode-map "r"
    'wdired-change-to-wdired-mode)
#+end_src

#+RESULTS:
: wdired-change-to-wdired-mode

** eldoc

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
  (setq eldoc-idle-delay 0.2)
  (setq eldoc-minor-mode-string "")
#+end_src

** show-paren-mode

- 対応するカッコを表示する

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src
** TODO find-function

- これは何をするんだろう？

#+begin_src emacs-lisp
  (find-function-setup-keys)
#+end_src

* パッケージ関連の設定
** リポジトリの設定
  - パッケージをダウンロードするリポジトリを設定します．
  - [[http://emacs-jp.github.io/packages/package-management/package-el.html][package.el - Emacs JP]]

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
	'(("org" .       "http://orgmode.org/elpa/")
	  ("gnu" .       "http://elpa.gnu.org/packages/")
	  ("marmalade" . "http://marmalade-repo.org/packages/")
	  ("melpa" .     "http://melpa.milkbox.net/packages/")))
  (package-initialize)
#+end_src

** パッケージ一覧の更新
  - 必要に応じてリフレッシュ
  - 参考
    - [[http://stackoverflow.com/questions/14836958/updating-packages-in-emacs][elpa - Updating packages in Emacs - Stack Overflow]]

#+begin_src emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents))
#+end_src

** 自作パッケージ導入マクロ

#+begin_src emacs-lisp
    (defun my/package-install (package-symbol)
      (unless (package-installed-p package-symbol)
	(package-install package-symbol)))

    (defun my/package-install-and-require (package-symbol)
      (my/package-install package-symbol)
      (require package-symbol))
#+end_src

* 日本語関連の設定
** 日本語文字コードの設定

- 言語環境を日本語に，コード体系をUTF-8にします．

#+begin_src emacs-lisp
  (set-language-environment "japanese")
  (prefer-coding-system 'utf-8)
#+end_src

** 日本語文字フォントの設定
*** 説明
ｰ Fontに関する調査
  - [[file:test.org::*Emacs%E3%81%AE%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%81%AE%E3%81%8A%E8%A9%B1][Emacsのフォントのお話]]

*** Rictyの設定                                                      :custom:

- この値はcustomize可能です．

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "ricty-13.5"))
#+end_src

#+RESULTS:
| (font . ricty-13.5) |

*** TODO Macでフォントを正しく設定する
   :PROPERTIES:
   :ID:       16b070ee-507e-49fa-b84d-fa573911ebeb
   :END:

- let* は，同じスコープ内のローカル変数への参照を許す(letは許さない）
- ifはthenを1つの式しか書けないのでcondを使う．whenもある．
- [[http://blog.sanojimaru.com/post/19807398882/cocoa-emacs-ricty][cocoa emacsでプログラミング用フォントRictyを使う]]
  ｰ この記事，あやしいかも．
- daemonで動かすとおちるかも

** 日本語入力時のカーソル色の変更

#+begin_src emacs-lisp
  (add-hook 'input-method-activate-hook
	    '(lambda () (set-cursor-color "green")))
  (add-hook 'input-method-inactivate-hook
	    '(lambda () (set-cursor-color "orchid")))
#+end_src

** LinuxでのMozcの設定

注意: in ~/.Xresourcesに
  Emacs*useXIM:	false
と設定しておくこと．

- http://www11.atwiki.jp/s-irie/pages/21.html#basic
- http://d.hatena.ne.jp/iRiE/20100530/1275212234

- 筆者の場合，OS側でもC-oでIMEを切り替えるようにしているため，これを設定しておかないと，C-c C-oなどが効かなくなる．

#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
    (require 'mozc)
    (setq default-input-method "japanese-mozc")
    (global-set-key (kbd "C-o") 'toggle-input-method)
    (setq mozc-candidate-style 'overlay))
#+end_src

#+RESULTS:
: overlay

* 個人用設定
** DELキーをBSにする

#+begin_src emacs-lisp
  (global-set-key "\C-h" 'delete-backward-char)
  (global-set-key (kbd "C-c C-h") 'help-command)
#+end_src

** バッファのフォントサイズ

- Page Up，Page Downで操作
- Macの場合はfn+↑，fn+↓

#+begin_src emacs-lisp
  ;バッファのフォントサイズを大きく
  (global-set-key (kbd "<prior>") 'text-scale-increase)
  ;バッファのフォントサイズを小さく
  (global-set-key (kbd "<next>")  'text-scale-decrease)
#+end_src

#+RESULTS:
: text-scale-decrease

** 個人用キーマップの設定
#+begin_src emacs-lisp
  (defun my/fullscreen ()
    (interactive)
    (set-frame-parameter
     nil
     'fullscreen
     (if (frame-parameter nil 'fullscreen)
	 nil
       'fullboth)))

  (defun my/open-init-folder()
    "設定フォルダを開きます．"
    (interactive)
    (find-file "~/.emacs.d/init.org"))

  (global-set-key [f11] 'my/fullscreen)
  (global-set-key (kbd "<f1>") 'my/open-init-folder)

  (defun my/other-window-backward ()
    "Move to other window backward."
    (interactive)
    (other-window -1))

  (define-prefix-command 'personal-map)
  (global-set-key (kbd "C-.") 'personal-map)

  (define-key 'personal-map (kbd "C-n") 'other-window)
  (define-key 'personal-map (kbd "C-p") 'my/other-window-backward)

  (define-key 'personal-map (kbd "m") 'imenu)
  (define-key 'personal-map (kbd "h") 'helm-mini)

  (define-key 'personal-map (kbd "i") 'yas-insert-snippet)
  (define-key 'personal-map (kbd "n") 'yas-new-snippet)
  (define-key 'personal-map (kbd "v") 'yas-visit-snippet-file)

  (define-key 'personal-map (kbd "y") 'helm-c-yas-complete)
  (define-key 'personal-map (kbd "s") 'helm-c-yas-create-snippet-on-region)

  (define-key 'personal-map (kbd "b") 'org-beamer-export-to-pdf)

  (cond ((eq system-type 'gnu/linux)
	 (define-key 'personal-map (kbd "p") 'evince-forward-search))
	((eq system-type 'darwin)
	 (define-key 'personal-map (kbd "p") 'skim-forward-search)))
#+end_src

* 文芸的プログラミング

plugin-enabledにあるシンボリックリンクをフォローします．

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

#' = function
- [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Anonymous-Functions.html][Anonymous Functions - GNU Emacs Lisp Reference Manual]]

[[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Babel: Introduction]]

Following codes do not work well in org-mode runing with C-c C-c.

#+begin_src emacs-lisp
  (setq dot-file-dir (file-name-directory
		       (or (buffer-file-name) load-file-name)))
  (setq org-file-dir (expand-file-name "plugins-enabled" dot-file-dir))
  (mapc #'org-babel-load-file (directory-files org-file-dir t "\\.org$"))
#+end_src

* 後処理
** 完了表示

#+begin_src emacs-lisp
  (message "%s" "%% init.elは完了しました %%")
#+end_src

** フッタコメント
#+begin_src emacs-lisp
  ;;; init.el ends here
#+end_src
