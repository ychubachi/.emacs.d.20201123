#+BABEL: :cache yes :tangle yes :noweb yes

* これはなに？
** 使い方
  - C-c C-v t でinit.elを生成
	- [[http://orgmode.org/manual/Header-arguments-in-Org-mode-properties.html#Header-arguments-in-Org-mode-properties][Header arguments in Org mode properties - The Org Manual]]
  - [[http://cask.readthedocs.org/en/latest/index.html][Cask — Cask 0.7.0]]
  - 日本のEmacsユーザ向け．
  - Emacsを設定するためのelです．
	- [[https://github.com/ychubachi/.emacs.d/blob/master/init.org][.emacs.d/init.org at master · ychubachi/.emacs.d]]
  - preludeを意識しています
	- [[http://batsov.com/prelude/][Prelude by bbatsov]]
  - コードネーム候補
	- aperitif 食前酒
  - daemonについて
  - 対応するEmacsのバージョンは24.3（2013-03-11公開版）以降です．
	- [[http://www.gnu.org/software/emacs/][GNU Emacs - GNU Project - Free Software Foundation (FSF)]]
	- [[http://www.gnu.org/software/emacs/news/NEWS.24.3]]
	- [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding - GNU Emacs Lisp Reference Manual]]
	- [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Closures.html#Closures][Closures - GNU Emacs Lisp Reference Manual]]

  - init.elについて
	- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File][Init File - GNU Emacs Manual]]
	- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Syntax.html#Init-Syntax][Init Syntax - GNU Emacs Manual]]
	  - init fileの文法．
	  - 特定の変数は自動的にbuffer localになる．
	- この場合はset-defaultを使うこと．

** カスタマイズ
  - custom.elを最後に読むので，ここでの設定を上書きできます．
  - custom.elはgitではignoreします．
  - Dropboxと連携したorg-modeとMobileOrgのための設定
  - [[http://d.hatena.ne.jp/a_bicky/20131230/1388396559][custom-set-variables は使わない方が良いかもしれない - あらびき日記]]
** 準備
*** git submodule
  - git submodule init
  - git submodule update
*** フォント
  - Ricty のインストール
*** aspell コマンドのインストール
  - git-commit-mode-hook でflyspellが自動的にonになる．
  - .aspell.conf の設定
	- [[http://sky-y.hatenablog.jp/entry/20091229/1262106336][YaTeX + aspell - 雲行きそらゆきココロイキ]]

  Error enabling Flyspell mode:
  (Error: No word lists can be found for the language "ja_JP".)

* トップブロック

#+NAME: top_block
#+begin_src emacs-lisp :tangle "init.el" :noweb tangle :padline no
  ;; init.el --- Emacsの初期設定
  <<init-package>>
  <<basic>>
  <<japanese>>
  <<package>>
  <<custom-file>>
  ;;; init.el ends here
#+end_src

* パッケージ機能の初期化
* Emacs本体が提供する機能
** Emacs本体が提供する機能の設定
#+NAME: basic
#+begin_src emacs-lisp
  <<server>>
  <<C-h>>
  <<wdired>>
#+end_src

** Emacsサーバーの起動

- Emacs serverの開始
- Emacs 既に起動している場合は立ち上げない
  - [[http://stackoverflow.com/questions/5570451/how-to-start-emacs-server-only-if-it-is-not-started][configuration - How to start emacs server only if it is not started? - Stack Overflow]]

#+NAME: server
#+begin_src emacs-lisp
  (load "server")
  (unless (server-running-p)
	(server-start))
#+end_src

** C-hをDELキーに設定
   - C-h が押されたら，C-? (<DEL>) に変換する．
   - ヘルプは[F1]でも参照できる．
   - 参考
	 - [[http://akisute3.hatenablog.com/entry/20120318/1332059326][EmacsのC-hをbackspaceとして使用する - 勉強日記]]
	 - [[http://www.gnu.org/software/emacs/manual/html_node/efaq/Swapping-keys.html#Swapping-keys][Swapping keys - GNU Emacs FAQ]]
   - keyboad-translate関数はサーバにする際動作しなかった
	 - [[http://lists.gnu.org/archive/html/help-gnu-emacs/2009-10/msg00505.html][Re: keyboard-translate not working with emacs daemon]]
#+NAME: C-h
#+begin_src emacs-lisp
(define-key key-translation-map [?\C-h] [?\C-?])
#+end_src

** diredでファイル名のリネーム

diredモードで r キーを押すと編集モードに入る．
完了したらC-c C-cで決定．C-c ESCでキャンセル．

wdiredのrequireはdired-mode-mapを定義するために必要．

#+NAME: wdired
#+begin_src emacs-lisp
  (require 'wdired)
  (bind-key "r" 'wdired-change-to-wdired-mode dired-mode-map)
#+end_src

* 日本語関連
** 日本語関連の設定

- 言語環境を日本語に，コード体系をUTF-8にします．
ｰ Fontに関する調査
  - [[file:test.org::*Emacs%E3%81%AE%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%81%AE%E3%81%8A%E8%A9%B1][Emacsのフォントのお話]]
  - この値はcustomize可能です．

#+NAME: japanese
#+begin_src emacs-lisp
  (set-language-environment "japanese")
  (prefer-coding-system 'utf-8)
  (when (eq system-type 'gnu/linux)
	(add-to-list 'default-frame-alist '(font . "ricty-13.5")))
#+end_src

** パッケージ機能の初期化の設定
#+NAME: init-package
#+begin_src emacs-lisp
  <<package-archives>>
  <<use-package>>
#+end_src

** ELPAアーカイブスの設定

#+NAME: package-archives
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
		   '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
		   '("marmalade" . "http://marmalade-repo.org/packages/"))
  (package-initialize)
#+end_src

** use-packageの設定
   use-packageマクロを利用できるようにします。
   - [[https://github.com/jwiegley/use-package][jwiegley/use-package]]

- [[https://github.com/emacsattic/bind-key][emacsattic/bind-key]]
  you can use M-x describe-personal-keybindings to see all such bindings you've set throughout your Emacs.
  (describe-personal-keybindings)

#+NAME: use-package
#+begin_src emacs-lisp
  (package-refresh-contents)
  (unless (package-installed-p 'use-package)
	(package-install 'use-package))
  (require 'use-package)
#+end_src

* パッケージ
** パッケージの設定
#+NAME: package
#+begin_src emacs-lisp
  <<exec-path-from-shell>>
  <<shell-pop>>
  <<undo-tree>>
  <<yasnippet>>
  <<magit>>
  <<open-junk-file>>
  <<paredit>>
  <<lispxmp>>
  <<multiple-cursors>>
  <<smartrep>>
  <<region-bindings-mode>>
  <<org>>
#+end_src

** ShellのPATH設定を引き継ぐ
  - [[http://qiita.com/catatsuy/items/3dda714f4c60c435bb25][EmacsでPATHの設定が引き継がれない問題をエレガントに解決する - Qiita {キータ}]]

#+NAME: exec-path-from-shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
		   :config
		   (progn (exec-path-from-shell-initialize))
		   :ensure t)
#+end_src

** shell-pop

#+NAME: shell-pop
#+begin_src emacs-lisp
  (use-package shell-pop
               :config
               (custom-set-variables
                '(shell-pop-autocd-to-working-dir nil)
                '(shell-pop-shell-type
                  (quote ("eshell" "*eshell*" (lambda nil (eshell)))))
                '(shell-pop-universal-key "C-z")
                '(shell-pop-window-height 30))
               :ensure t)
#+end_src

** Undo Tree
#+NAME: undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree
               :config
               (global-undo-tree-mode t)
               :ensure t)
#+end_src

** yasnippet
  - [[https://github.com/capitaomorte/yasnippet][capitaomorte/yasnippet]]
  - [[http://fukuyama.co/yasnippet][yasnippet 8.0の導入からスニペットの書き方、anything/helm/auto-completeとの連携 - Web学び]]

#+NAME: yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
               :config
               (yas-global-mode 1)
               :ensure t)
#+end_src
** Magit
#+NAME: magit
#+begin_src emacs-lisp
  (use-package magit
               :bind ("C-c g" . magit-status)
               :ensure t)
#+end_src

** open-junk-file

#+NAME: open-junk-file
#+begin_src emacs-lisp
  (use-package open-junk-file
               :bind ("C-c j" . open-junk-file)
               :config
               (setq open-junk-file-directory "~/tmp/junk/%Y/%m/%d-%H%M%S.")
               :ensure t)
#+end_src

** paredit - カッコの対応を保持して編集

#+NAME: paredit
#+begin_src emacs-lisp
  (use-package paredit
               :init
               (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
               (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
               (add-hook 'lisp-mode-hook 'enable-paredit-mode)
               (add-hook 'ielm-mode-hook 'enable-paredit-mode)
               :ensure t)
#+end_src

** lispxmp - lisp式の評価結果を注釈する

  - M-; M-; で lispxmp用コメントの自動挿入
  - C-c e で評価結果を注釈

#+NAME: lispxmp
#+begin_src emacs-lisp
  (use-package lispxmp
               :init
               (bind-key "C-c e" 'lispxmp emacs-lisp-mode-map)
               :ensure t)
#+end_src

** 複数のカーソルを扱う:multiple-cursors
- [[https://github.com/magnars/multiple-cursors.el][magnars/multiple-cursors.el]]

#+NAME: multiple-cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
               :ensure t)
#+end_src

** リージョンがある間のキーバインディングを変更する

#+NAME: region-bindings-mode
#+begin_src emacs-lisp
  (use-package region-bindings-mode
               :init
               (progn
                 (region-bindings-mode-enable)
                 (bind-keys :map region-bindings-mode-map
                         ("a" . mc/mark-all-like-this)
                         ("p" . mc/mark-previous-like-this)
                         ("n" . mc/mark-next-like-this)
                         ("m" . mc/mark-more-like-this-extended)
                         ("e" . mc/edit-lines)))
               :ensure t)
#+end_src

** smartrep.el
- [[http://sheephead.homelinux.org/2011/12/19/6930/][連続操作を素敵にするsmartrep.el作った - sheephead]]

#+NAME: smartrep
#+begin_src emacs-lisp
  (use-package smartrep
               :ensure t)
#+end_src


** org-mode
*** Orgについて
- マニュアル
  - [[http://orgmode.org/org.html][The Org Manual]]
  - [[http://orgmode.org/elpa.html][Org Emacs lisp Package Archive]]

- Dropboxとの連携
  - Dropboxと連携させると便利

- 準備
  - mkdir ~/Dropbox/Org
- org-directory のデフォルトは~/org
- これをDropboxの下にする．Dropbox/Org
- ディレクトリは自分で作ること．

- org-default-notes-file のデフォルトは .notes
- ただし，.notesを開いてもorgモードにならないので，エラーになる．
- だから，ファイル名は指定する必要がある． -> notes.org
- その他に，t: Todoとj: Journal（日記帳）を．

- notes.orgは，トップページ扱い
- org-agenda-files -> MobileOrgにPushする

| 説明                       | 変数名                 | 推奨               |
|----------------------------+------------------------+--------------------|
| 備忘録用ファイルを置く場所 | org-directory          | "~/Dropbox/Org"    |
| アジェンダファイルの指定   | org-agenda-files       | ("~/Dropbox/Org/") |
| デフォルトのノーツ         | org-default-notes-file | "notes.org"        |
| キャプチャ                 | org-capture-templates  | t: Todo j: Journal |


| 説明                           | 変数名                         | 推奨                          |
|--------------------------------+--------------------------------+-------------------------------|
| バックグランドでのエキスポート | org-export-in-background       | nil                           |
| 画像を表示                     | org-startup-with-inline-images | t                             |
| ToDoアイテムの状態             | org-todo-keywords              | TODO WAIT DONE SOMEDAY CANCEL |

| 変数名                  | 設定例                             |
|-------------------------+------------------------------------|
| op/repository-directory | "/home/yc/git/ychubachi.github.io" |
| op/site-domain          | "http://ychubachi.github.io/"      |

*** 全体の定義

#+NAME: org
#+begin_src emacs-lisp
  <<my/org-caputure-templates>>
  <<my/ox-latex>>
  <<my/ox-beamer>>
  (use-package org
               :bind
               <<org-bind>>
               :init
               (progn
                 (my/org-caputure-templates)
                 <<org-todo-keywords>>
                 <<org-babel-load-languages>>
                 <<org-babel-sh-command>>
                 <<org-deadline-warning-days>>
                 <<org-agenda-custom-commands>>
                 <<org-confirm-babel-evaluate>>
                 <<org/mobile>>
                 <<org-column-title>>
                 <<org/custom-set-variables>>
                 <<ox-md>> 
                 (my/ox-latex)
                 (my/ox-beamer)
                 <<minted>>
                 <<ox-reveal>>
                 <<ox-protocol>>)
               :config
               (progn
                 <<org/truncate-lines>>)
               :ensure t)
#+end_src

*** キーバインド
#+NAME: org-bind
#+begin_src emacs-lisp
  (("C-c l" . org-store-link)
   ("C-c c" . org-capture)
   ("C-c a" . org-agenda)
   ("C-c b" . org-switchb))
#+end_src

*** キャプチャ
#+NAME: my/org-caputure-templates
#+begin_src emacs-lisp
  (defun my/org-caputure-templates ()
    (setq org-capture-templates
          (quote
           (("t" "Todo" entry (file+headline "todo.org" "Tasks")
             "* TODO %?
  ")
            ("l" "Link as Todo" entry (file+headline "todo.org" "Tasks")
             "* TODO %?
  Link: %a
  Text: %i
  ")
            ("j" "Journal" entry (file+datetree "journal.org")
             "* %?
  ")
            ("b" "Bookmark" entry (file+headline "bookmark.org" "Bookmarks")
             "* %a :bookmark:
  引用: %i
  %?
  ")
            ))))
#+end_src

*** TODOの種類

#+NAME: org-todo-keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote
         ((sequence
           "TODO(t)"
           "WIP(p)"
           "WAIT(w)"
           "|"
           "DONE(d)"
           "SOMEDAY(s)"
           "CANCEL(c)"))))
#+end_src

*** 期日の何日前に予定表（Agenda）に表示するか

#+NAME: org-deadline-warning-days
#+begin_src emacs-lisp
  (setq org-deadline-warning-days 7)
#+end_src

*** 予定表生成追加命令

- [[http://orgmode.org/manual/Matching-tags-and-properties.html][Matching tags and properties - The Org Manual]]
- [[https://www.gnu.org/software/emacs/manual/html_node/org/Special-agenda-views.html][Special agenda views - The Org Manual]]

#+NAME: org-agenda-custom-commands
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
	(quote
	 (("x" "TODOs without Scheduled" tags-todo "+SCHEDULED=\"\"" nil)
	  ("d" "TODOs without Deadline" tags-todo "+DEADLINE=\"\"" nil)
	  ("p" "私用" tags-todo "+私用" nil)
	  ("P" "私用以外" tags-todo "-私用" nil)
	  ("n" "Agenda and all TODO's" ((agenda "" nil)
					(alltodo "" nil)) nil))))
#+end_src

*** Babelで対応する言語
#+NAME: org-babel-load-languages
#+begin_src emacs-lisp
  (setq org-babel-load-languages
        (quote
         ((emacs-lisp . t)
          (dot . t)
          (java . t)
          (ruby . t)
          (sh . t))))
#+end_src
*** BabelのShellのコードの実行にbashを使う
   - デフォルトのシェルがzshなので，設定しておく．
   - 2014-01-24現在，customizationの対応ではない模様．

#+NAME: org-babel-sh-command
#+begin_src emacs-lisp
(setq org-babel-sh-command "bash")
#+end_src

*** org-confirm-babel-evaluate

#+NAME: org-confirm-babel-evaluate
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

*** Linewrap

- [[http://superuser.com/questions/299886/linewrap-in-org-mode-of-emacs][Linewrap in Org-mode of Emacs? - Super User]]

#+NAME: org/truncate-lines
#+begin_src emacs-lisp
  (bind-key "M-q" 'toggle-truncate-lines org-mode-map)
#+end_src
*** Mobile Org関連

- [[https://github.com/matburt/mobileorg-android/wiki][Home · matburt/mobileorg-android Wiki]]


#+NAME: org/mobile
#+begin_src emacs-lisp
  (setq org-mobile-directory "~/Dropbox/アプリ/MobileOrg")
  (setq org-mobile-inbox-for-pull "~/Dropbox/Org/from-mobile.org")
#+end_src

*** カラムのタイトルのフォント
- Heightをフォントの高さに合わせる

#+NAME: org-column-title
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-column-title
	 ((t (:background "grey30" :underline t :weight bold :height 135)))))
#+end_src

*** カスタム変数

#+NAME: org/custom-set-variables
#+begin_src emacs-lisp
(custom-set-variables
 '(org-export-in-background nil)
 '(org-src-fontify-natively t))
#+end_src

*** Markdown export

#+NAME: ox-md
#+begin_src emacs-lisp
  (require 'ox-md)
#+end_src

*** LaTeX export

LaTeXでエキスポートできるようにします．
下記URLのコードから，xelatex用の設定を抜き出しました．

− [[http://oku.edu.mie-u.ac.jp/~okumura/texwiki/?Emacs%2FOrg%20mode#h20d131a][Emacs/Org mode - TeX Wiki]] （2014-08-03 参照）

#+NAME: my/ox-latex
#+begin_src emacs-lisp
  (defun my/ox-latex ()
    (require 'ox-latex)
    (setq org-latex-default-class "bxjsarticle")
    (setq org-latex-pdf-process '("latexmk -e '$pdflatex=q/xelatex %S/' -e '$bibtex=q/bibtexu %B/' -e '$biber=q/biber --bblencoding=utf8 -u -U --output_safechars %B/' -e '$makeindex=q/makeindex -o %D %S/' -norc -gg -pdf %f"))
    (setq org-export-in-background t)

    (add-to-list 'org-latex-classes
                 '("bxjsarticle"
                   "\\documentclass{bxjsarticle}
  [NO-DEFAULT-PACKAGES]
  \\usepackage{zxjatype}
  \\usepackage[ipa]{zxjafont}
  \\usepackage{xltxtra}
  \\usepackage{amsmath}
  \\usepackage{newtxtext,newtxmath}
  \\usepackage{graphicx}
  \\usepackage{hyperref}
  \\ifdefined\\kanjiskip
    \\usepackage{pxjahyper}
    \\hypersetup{colorlinks=true}
  \\else
    \\ifdefined\\XeTeXversion
      \\hypersetup{colorlinks=true}
    \\else
      \\ifdefined\\directlua
        \\hypersetup{pdfencoding=auto,colorlinks=true}
      \\else
        \\hypersetup{unicode,colorlinks=true}
      \\fi
    \\fi
  \\fi"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

*** LeTeX (beamer) export
 パッケージの読み込み
 文書クラスの設定(beamer)

#+NAME: my/ox-beamer
#+begin_src emacs-lisp
  (defun my/ox-beamer ()
    (require 'ox-beamer)
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass[t]{beamer}
  \\usepackage{zxjatype}
  \\usepackage[ipa]{zxjafont}
  \\setbeamertemplate{navigation symbols}{}
  \\hypersetup{colorlinks,linkcolor=,urlcolor=gray}
  \\AtBeginSection[]
  {
    \\begin{frame}<beamer>{Outline}
    \\tableofcontents[currentsection,currentsubsection]
    \\end{frame}
  }
  \\setbeamertemplate{navigation symbols}{}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
    (add-to-list 'org-latex-classes
                 '("beamer_lecture"
                   "\\documentclass[t]{beamer}
  [NO-DEFAULT-PACKAGES]
  \\usepackage{zxjatype}
  \\usepackage[ipa]{zxjafont}
  \\setbeamertemplate{navigation symbols}{}
  \\hypersetup{colorlinks,linkcolor=,urlcolor=gray}
  \\AtBeginPart
  {
  \\begin{frame}<beamer|handout>
  \\date{\\insertpart}
  \\maketitle
  \\end{frame}
  }
  \\AtBeginSection[]
  {
  \\begin{frame}<beamer>
  \\tableofcontents[currentsection,currentsubsection]
  \\end{frame}
  }"
                     ("\\part{%s}" . "\\part*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src

*** LaTeXでソースコードのエクスポート

#+NAME: minted
#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
#+end_src

*** org-reveal
  - https://github.com/yjwen/org-reveal

#+NAME: ox-reveal
#+begin_src emacs-lisp
  (use-package ox-reveal :ensure t)
#+end_src

*** org-protocol
  - [[http://orgmode.org/worg/org-contrib/org-protocol.html#sec-3-6][org-protocol.el – Intercept calls from emacsclient to trigger custom actions]]

  - C-c C-lでOrg形式のリンク挿入?
  - [[http://stackoverflow.com/questions/7464951/how-to-make-org-protocol-work][firefox - How to make org-protocol work? - Stack Overflow]]
	- gistで公開してあげようかな
  - [[http://d.hatena.ne.jp/reppets/20111109/1320846292][Unityランチャーに自分でインストール/ビルドしたアプリケーションを登録する - reppets.log.1]]
  - [[http://kb.mozillazine.org/Register_protocol#Linux][Register protocol - MozillaZine Knowledge Base]]
  - [[http://orgmode.org/worg/org-contrib/org-protocol.html#sec-3-6]]
	- 古い

#+begin_src
javascript:location.href='org-protocol://store-link://'+encodeURIComponent(location.href)
javascript:location.href='org-protocol://capture://t/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())
#+end_src

#+NAME: ox-protocol
#+begin_src emacs-lisp
  (require 'org-protocol)
#+end_src

* カスタマイズ
カスタマイズ設定を保存するファイルの指定
  - 概要
	 - カスタマイズ設定を保存するファイルを指定して，読み込みます．
	   - custom.elには個人用の設定を書く
	 - このコードで設定した値は，custom.el内で上書きすることができます．
  - 参考
	 - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Saving Customizations - GNU Emacs Manual]]

#+NAME: custom-file
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (if (file-exists-p custom-file)
	  (load custom-file))
#+end_src
