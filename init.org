# -*- org -*-
#+TITLE: init.org
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle init.el
#+PROPERTY: header-args            :results silent

* これはなに？
** 使い方
  - 日本のEmacsユーザ向け．
  - Emacsを設定するためのelです．
    - [[https://github.com/ychubachi/.emacs.d/blob/master/init.org][.emacs.d/init.org at master · ychubachi/.emacs.d]]
  - preludeを意識しています
    - [[http://batsov.com/prelude/][Prelude by bbatsov]]
  - コードネーム候補
    - aperitif 食前酒
  - oh-my-zshのようなplugins
    - [[https://github.com/robbyrussell/oh-my-zsh][robbyrussell/oh-my-zsh]]
  - C-c C-v t でinit.elを生成
    - [[http://orgmode.org/manual/Header-arguments-in-Org-mode-properties.html#Header-arguments-in-Org-mode-properties][Header arguments in Org mode properties - The Org Manual]]
  - daemonについて
  - 対応するEmacsのバージョンは24.3（2013-03-11公開版）以降です．
    - [[http://www.gnu.org/software/emacs/][GNU Emacs - GNU Project - Free Software Foundation (FSF)]]
    - [[http://www.gnu.org/software/emacs/news/NEWS.24.3]]
    - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding - GNU Emacs Lisp Reference Manual]]
    - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Closures.html#Closures][Closures - GNU Emacs Lisp Reference Manual]]

  - init.elについて
    - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File][Init File - GNU Emacs Manual]]
    - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Syntax.html#Init-Syntax][Init Syntax - GNU Emacs Manual]]
      - init fileの文法．
      - 特定の変数は自動的にbuffer localになる．
	- この場合はset-defaultを使うこと．

** カスタマイズ
  - custom.elを最後に読むので，ここでの設定を上書きできます．
  - custom.elはgitではignoreします．
  - Dropboxと連携したorg-modeとMobileOrgのための設定
  - [[http://d.hatena.ne.jp/a_bicky/20131230/1388396559][custom-set-variables は使わない方が良いかもしれない - あらびき日記]]
** 準備
*** git submodule
  - git submodule init
  - git submodule update
*** フォント
  - Ricty のインストール
*** aspell コマンドのインストール
  - git-commit-mode-hook でflyspellが自動的にonになる．
  - .aspell.conf の設定
    - [[http://sky-y.hatenablog.jp/entry/20091229/1262106336][YaTeX + aspell - 雲行きそらゆきココロイキ]]

  Error enabling Flyspell mode:
  (Error: No word lists can be found for the language "ja_JP".)

** TODOs
*** TODO custem-sample.elを作る
   :PROPERTIES:
   :ID:       82dac097-153d-4efc-88eb-ac6616df3b5a
   :END:
   - ファイルがなければコピーする
     - その際，問い合わせをする
*** TODO custom.elにある設定をこちらに移す（custom.elなしでもokにする）
    :PROPERTIES:
    :ID:       5aad65c8-d606-4d34-808d-9afaa5e638c0
    :END:
*** TODO org-insert-heading-respect-contentをC-jにする
    :PROPERTIES:
    :ID:       f9593ce6-203d-47a7-9342-fd602c193a0c
    :END:
    C-jはorg-return-indentにバインドされている
*** TODO [[http://www.emacswiki.org/emacs/UnitTesting][EmacsWiki: Unit Testing]]
    :PROPERTIES:
    :ID:       5cb66ace-65c3-4e01-9c1c-f25ae7008668
    :END:
*** TODO [[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell]]
    :PROPERTIES:
    :ID:       cd8617f9-5634-467f-9c14-ca657a802726
    :END:
*** TODO flyspell-modeでC-.がかちあう
    :PROPERTIES:
    :ID:       7af985a9-1630-4e8a-8202-3d434351c518
    :END:
*** TODO [[http://shibayu36.hatenablog.com/entry/2012/12/29/001418][年末emacs設定大掃除をして、これは捨てられないと思った設定書いてく - $shibayu36->blog;]]
    :PROPERTIES:
    :ID:       e010dd60-ee65-4042-9b16-9ae0f2681837
    :END:
*** TODO Qiitaに投稿できないか
    :PROPERTIES:
    :ID:       7cd92222-91c7-4c46-9325-85e891c20216
    :END:
*** TODO org-modeで候補をインラインにできないか
    :PROPERTIES:
    :ID:       0d60c33f-5d9b-4447-bf76-8344bf44471c
    :END:
*** TODO F1はssh時、ターミナルとかぶる
*** TODO [[http://www.fan.gr.jp/~ring/doc/elisp_19/elisp-jp_39.html][GNU Emacs Lispリファレンス・マニュアル: A. ヒントと標準的な作法]]
* 前処理
** ヘッダコメント

#+begin_src emacs-lisp :padline no
;; init.el --- Emacsの初期設定
#+end_src

** 開始の通知

#+begin_src emacs-lisp
 (message "%s" "%% Emacsの設定を開始します %%")
#+end_src

** 完了の通知
*** after-init-hookの設定
  - after-init-hookはパッケージの初期化が完了したら呼ばれるフックです．
    - [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html#Init-File][Init File - GNU Emacs Lisp Reference Manual]]

*** カスタマイズ設定を保存するファイルの指定
  - 概要
     - カスタマイズ設定を保存するファイルを指定して，読み込みます．
       - custom.elには個人用の設定を書く
     - このコードで設定した値は，custom.el内で上書きすることができます．
     - after-init-hookでcustom.elを読みこませる理由
       - init.elでエラーが発生しても確実にカスタマイズ設定を読み込みます．
  - 参考
     - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Saving Customizations - GNU Emacs Manual]]

#+begin_src emacs-lisp
    (add-hook 'after-init-hook
	      (lambda ()
		(setq custom-file "~/.emacs.d/custom.el")
		(if (file-exists-p (expand-file-name custom-file))
		    (load (expand-file-name custom-file)))
		(message "%s" "%% custom.elを読み込みました %%")))
#+end_src

#+RESULTS:
| x-wm-set-size-hint | init-loader-show-log | (lambda nil (message %% Emacsの設定が完了しました %%)) |

** サーバー起動

- Emacs serverの開始
- Emacs 既に起動している場合は立ち上げない
  - [[http://stackoverflow.com/questions/5570451/how-to-start-emacs-server-only-if-it-is-not-started][configuration - How to start emacs server only if it is not started? - Stack Overflow]]

#+begin_src emacs-lisp
  (load "server")
  (unless (server-running-p)
    (server-start))
#+end_src

* Emacs本体が提供する機能の設定
  - 外部のパッケージに依存しない，標準的な設定を行います．
** ロードパスの設定

- normal-top-level-add-subdirs-to-load-path は
  default-directory の全てのサブディレクトリを load-path に追加する
  関数です．

- gitのsubmoduleとして管理するライブラリを追加します．

#+begin_src emacs-lisp
  (let ((default-directory "~/.emacs.d/git/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

- ソースコードて管理するライブラリを追加します．

#+begin_src emacs-lisp
  (let ((default-directory "~/.emacs.d/site-lisp/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

** バックアップ保存場所の設定                                      :files.el:
- 全てのファイルのバックアップを~/.emacs.d/data/backup/以下に保存します．
- この項目はcustom.elでも設定可能．

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
	(quote ((".*" "~/.emacs.d/data/backup/" t))))
  (setq backup-directory-alist
	(quote (("\\.*$" . "~/.emacs.d/data/backup"))))
#+end_src

#+RESULTS:
: ~/.emacs.d/data/bookmarks

** ブックマーク保存場所の設定					:bookmark.el:

- [[http://www.geocities.co.jp/SiliconValley-Bay/9285/EMACS-JA/emacs_74.html][GNU Emacsマニュアル: Bookmarks]]
- [[http://maruta.be/intfloat_staff/53][Emacs でファイルを素早く開く(その1) ～ bookmark, filecache ～ | イントフロート スタッフブログ]]

#+begin_src emacs-lisp
  (setq bookmark-default-file
	"~/.emacs.d/data/bookmarks")
#+end_src

** ファイルの自動再読み込み                                   :autorevert.el:
   Emacsの外でファイルが更新されたら，自動的にバッファを再読込する．

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** スタートアップスクリーン                                      :startup.el:

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

** 自動保存                                                      :startup.el:

#+begin_src emacs-lisp
  (setq auto-save-list-file-prefix
	"~/data/auto-save-list/.saves-")
#+end_src

** カッコの対応を表示                                              :paren.el:

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

#+RESULTS:
: t

** 不要な行末の空白を削除                                     :whitespace.el:

- 保存する前に，不要な空白を取り除きます．
- 参考
  - [[http://batsov.com/articles/2011/11/25/emacs-tip-number-3-whitespace-cleanup/][Emacs Tip #3: Whitespace Cleanup - (think)]]
  - [[http://qiita.com/itiut@github/items/4d74da2412a29ef59c3a][Emacs - whitespace-modeを使って、ファイルの保存時に行末のスペースや末尾の改行を削除する - Qiita]]

#+begin_src emacs-lisp
  (add-hook 'before-save-hook
   'whitespace-cleanup)
#+end_src

#+RESULTS:
| auto-cleanup |

** フレームの表題                                                         :C:

| 変数名          | 内容                         |
|-----------------+------------------------------|
| menu-bar-mode   | メニューバーの表示           |
| tool-bar-mode   | ツールバーを表示             |
| scroll-bar-mode | スクロールバーの表示（位置） |

#+begin_src emacs-lisp
  (setq frame-title-format
	(format "%%f - Emacs@%s" (system-name)))
#+end_src

** 行番号・列番号をモードラインに表示                             :simple.el:

モードラインに(24, 20)といった形式で，カーソルのある行と列を表示します．

#+begin_src emacs-lisp
  (column-number-mode t)
#+end_src

#+RESULTS:
: t

** 時刻の表示                                                       :time.el:
- http://www.emacswiki.org/emacs/DisplayTime

モードラインの時刻を24時間表示にします．ロードアベレージは表示させません．

#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (display-time-mode 1)
#+end_src

#+RESULTS:

** コメントのフォントを立体にする                              :font-lock.el:
- [[http://ja.wikipedia.org/wiki/%E7%AB%8B%E4%BD%93%E6%B4%BB%E5%AD%97][立体活字 - Wikipedia]]

#+begin_src emacs-lisp
(custom-set-faces
 '(font-lock-comment-face ((t (:foreground "chocolate1" :slant normal)))))
#+end_src

** マウス操作                                                      :mouse.el:

マウスの中ボタンでペーストする位置を変更します．
標準ではクリックした位置にペーストされるので，
カーソルの位置にペーストするようにします．

#+begin_src emacs-lisp
  (setq mouse-yank-at-point t)
#+end_src

マウスでドラックした範囲をEmacsのクリップボードにコピーします．

#+begin_src emacs-lisp
  (setq mouse-drag-copy-region t)
#+end_src

** コンパイル                                                    :compile.el:

#+begin_src emacs-lisp
 (setq compilation-ask-about-save nil)
#+end_src

** アウトラインモードのプリフィックス                            :outline.el:

アウトラインマイナーモードのプリフィックスは，標準で C-c @ です．
これでは使いづらいので，変更します．

#+begin_src emacs-lisp
  (setq outline-minor-mode-prefix "")
#+end_src

** ファイル名のリネーム                                           :wdired.el:

diredモードで r キーを押すと編集モードに入る．
完了したらC-c C-cで決定．C-c ESCでキャンセル．

wdiredのrequireは，dired-mode-mapを定義するために必要

#+begin_src emacs-lisp
  (require 'wdired)
  (define-key dired-mode-map "r"
    'wdired-change-to-wdired-mode)
#+end_src

#+RESULTS:
: wdired-change-to-wdired-mode

* キーバインディング
** DELキーをBSにする

#+begin_src emacs-lisp
  (global-set-key "\C-h" 'delete-backward-char)
  (global-set-key (kbd "C-c C-h") 'help-command)
#+end_src

** バッファのフォントサイズ

- Page Up，Page Downで操作
- Macの場合はfn+↑，fn+↓

#+begin_src emacs-lisp
  ;バッファのフォントサイズを大きく
  (global-set-key (kbd "<prior>") 'text-scale-increase)
  ;バッファのフォントサイズを小さく
  (global-set-key (kbd "<next>")  'text-scale-decrease)
#+end_src

#+RESULTS:
: text-scale-decrease

* パッケージ関連の設定
** リポジトリの設定
  - パッケージをダウンロードするリポジトリを設定します．
  - [[http://emacs-jp.github.io/packages/package-management/package-el.html][package.el - Emacs JP]]

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
	'(("org" .       "http://orgmode.org/elpa/")
	  ("gnu" .       "http://elpa.gnu.org/packages/")
	  ("marmalade" . "http://marmalade-repo.org/packages/")
	  ("melpa" .     "http://melpa.milkbox.net/packages/")))
  (package-initialize)
#+end_src

** パッケージ一覧の更新
  - 必要に応じてリフレッシュ
  - 参考
    - [[http://stackoverflow.com/questions/14836958/updating-packages-in-emacs][elpa - Updating packages in Emacs - Stack Overflow]]

#+begin_src emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents))
#+end_src

** 自作パッケージ導入マクロ

#+begin_src emacs-lisp
    (defun my/package-install (package-symbol)
      (unless (package-installed-p package-symbol)
	(package-install package-symbol)))

    (defun my/package-install-and-require (package-symbol)
      (my/package-install package-symbol)
      (require package-symbol))
#+end_src

* 日本語関連の設定
** 日本語文字コードの設定

- 言語環境を日本語に，コード体系をUTF-8にします．

#+begin_src emacs-lisp
  (set-language-environment "japanese")
  (prefer-coding-system 'utf-8)
#+end_src

** 日本語文字フォントの設定
*** 説明
ｰ Fontに関する調査
  - [[file:test.org::*Emacs%E3%81%AE%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%81%AE%E3%81%8A%E8%A9%B1][Emacsのフォントのお話]]

*** Rictyの設定                                                      :custom:

- この値はcustomize可能です．

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "ricty-13.5"))
#+end_src

#+RESULTS:
| (font . ricty-13.5) |

*** TODO Macでフォントを正しく設定する
   :PROPERTIES:
   :ID:       16b070ee-507e-49fa-b84d-fa573911ebeb
   :END:

- let* は，同じスコープ内のローカル変数への参照を許す(letは許さない）
- ifはthenを1つの式しか書けないのでcondを使う．whenもある．
- [[http://blog.sanojimaru.com/post/19807398882/cocoa-emacs-ricty][cocoa emacsでプログラミング用フォントRictyを使う]]
  ｰ この記事，あやしいかも．
- daemonで動かすとおちるかも

#+begin_src emacs-lisp
  ;; (cond
  ;;  ((eq system-type 'darwin)
  ;;   (let* ((size 14)
  ;;          (h (* size 10))
  ;;          (font-ascii "Ricty")
  ;;          (font-jp    "Ricty")
  ;;          (font-spec-ascii (font-spec :family font-ascii))
  ;;          (font-spec-jp    (font-spec :family font-jp)))
  ;;     (set-face-attribute 'default nil :family font-ascii :height h)
  ;;     (set-fontset-font nil 'japanese-jisx0208        font-spec-jp)
  ;;     (set-fontset-font nil 'japanese-jisx0212        font-spec-jp)
  ;;     (set-fontset-font nil 'japanese-jisx0213.2004-1 font-spec-jp)
  ;;     (set-fontset-font nil 'japanese-jisx0213-1      font-spec-jp)
  ;;     (set-fontset-font nil 'japanese-jisx0213-2      font-spec-jp)
  ;;     (set-fontset-font nil 'katakana-jisx0201        font-spec-jp)
  ;;     (set-fontset-font nil '(#x0080 . #x024F)        font-spec-ascii)
  ;;     (set-fontset-font nil '(#x0370 . #x03FF)        font-spec-ascii))
  ;;   ))
#+end_src

#+RESULTS:

** 日本語入力時のカーソル色の変更

#+begin_src emacs-lisp
  (add-hook 'input-method-activate-hook
	    '(lambda () (set-cursor-color "green")))
  (add-hook 'input-method-inactivate-hook
	    '(lambda () (set-cursor-color "orchid")))
#+end_src

** LinuxでのMozcの設定

注意: in ~/.Xresourcesに
  Emacs*useXIM:	false
と設定しておくこと．

- http://www11.atwiki.jp/s-irie/pages/21.html#basic
- http://d.hatena.ne.jp/iRiE/20100530/1275212234

- 筆者の場合，OS側でもC-oでIMEを切り替えるようにしているため，これを設定しておかないと，C-c C-oなどが効かなくなる．

#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
    (require 'mozc)
    (setq default-input-method "japanese-mozc")
    (global-set-key (kbd "C-o") 'toggle-input-method)
    (setq mozc-candidate-style 'overlay))
#+end_src

#+RESULTS:
: overlay

* Emacs LISP テクニックバイブル

- p.31より

** open-junk-file

#+begin_src emacs-lisp
  (my/package-install-and-require 'open-junk-file)
  (global-set-key (kbd "C-x C-z") 'open-junk-file)
#+end_src

** lispxmp

- 式の評価結果を注釈する
  - M-; M-; て lispxmp用コメントの自動挿入
  - C-c C-d で評価結果を注釈

#+begin_src emacs-lisp
  (my/package-install-and-require 'lispxmp)                 ; =>
  (define-key emacs-lisp-mode-map (kbd "C-c C-d") 'lispxmp) ; =>
#+end_src

** paredit

- カッコの対応を保持して編集

#+begin_src emacs-lisp
  (my/package-install-and-require 'paredit)
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-mode-hook 'enable-paredit-mode)
  (add-hook 'ielm-mode-hook 'enable-paredit-mode)
#+end_src

** TODO auto-async-byte-compile

#+begin_src emacs-lisp :tangle no
  (my/package-install-and-require 'auto-async-byte-compile)
  (setq auto-async-byte-compile-exclude-files-regexp "/junk/")
  (add-hook 'emacs-lisp-mode-hook 'enable-auto-async-byte-compile-mode)
#+end_src

** eldoc

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
  (setq eldoc-idle-delay 0.2)
  (setq eldoc-minor-mode-string "")
#+end_src

** show-paren-mode

- 対応するカッコを表示する

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** TODO newline-and-indent

− RET と C-m は同じ
- TODO C-jとの違いは？

#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-m") 'newline-and-indent)
#+end_src

** TODO find-function

- これは何をするんだろう？

#+begin_src emacs-lisp
  (find-function-setup-keys)
#+end_src

* exec-path-from-shell

  - ShellのPATH設定を引き継ぐ:
    - [[http://qiita.com/catatsuy/items/3dda714f4c60c435bb25][EmacsでPATHの設定が引き継がれない問題をエレガントに解決する - Qiita {キータ}]]

#+begin_src emacs-lisp
  (my/package-install-and-require 'exec-path-from-shell)
  (exec-path-from-shell-initialize)
#+end_src

* yasnippet
  - [[http://fukuyama.co/yasnippet][yasnippet 8.0の導入からスニペットの書き方、anything/helm/auto-completeとの連携 - Web学び]]

#+begin_src emacs-lisp
  (dolist (package '(yasnippet))
    (when (not (package-installed-p package))
      (package-install package)))
  (require 'yasnippet)
  (yas-global-mode 1)
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
#+end_src

* migemo
** 概要
ローマ字で日本語をインクリメンタルサーチ

- 注意
  - cmigemoコマンドがインストールされていること．
  - locate migemo-dictで辞書の場所調べ，設定してください．
- 参考
  - https://github.com/emacs-jp/migemo
  - [[http://qiita.com/catatsuy/items/c5fa34ead92d496b8a51][migemoを使ってEmacsライフを快適に - Qiita {キータ}]]

** 実行可否確認

#+begin_src emacs-lisp
  (unless (executable-find "cmigemo")
    (warn "！！ 警告：cmigemoコマンドが呼び出せません　！！"))
#+end_src

#+RESULTS:
: t

** 設定

#+begin_src emacs-lisp
  (when (and (executable-find "cmigemo")
	     (require 'migemo nil t))
    (setq migemo-options '("-q" "--emacs"))

    (setq migemo-user-dictionary nil)
    (setq migemo-regex-dictionary nil)
    (setq migemo-coding-system 'utf-8-unix)
    (load-library "migemo")
    (migemo-init)

    (setq migemo-command "cmigemo")

    (cond
     ((eq system-type 'gnu/linux)
      (setq migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict"))
     ((eq system-type 'darwin)
      (setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")))
    )
#+end_src

#+RESULTS:
: /usr/share/cmigemo/utf-8/migemo-dict

* Org
** Orgについて
*** マニュアル
  - [[http://orgmode.org/org.html][The Org Manual]]
  - [[http://orgmode.org/elpa.html][Org Emacs lisp Package Archive]]
*** Dropboxとの連携

** orgパッケージのインストール

#+begin_src emacs-lisp
  (dolist (package '(org org-plus-contrib))
    (when (not (package-installed-p package))
      (package-install package)))

  (require 'org)
#+end_src

** 思いついたらすぐ記録（Capture）
- 準備
  - mkdir ~/Dropbox/Org
- org-directory のデフォルトは~/org
- これをDropboxの下にする．Dropbox/Org
- ディレクトリは自分で作ること．

- org-default-notes-file のデフォルトは .notes
- ただし，.notesを開いてもorgモードにならないので，エラーになる．
- だから，ファイル名は指定する必要がある． -> notes.org
- その他に，t: Todoとj: Journal（日記帳）を．

- notes.orgは，トップページ扱い

| 説明                       | 変数名                 | 推奨               |
|----------------------------+------------------------+--------------------|
| 備忘録用ファイルを置く場所 | org-directory          | "~/Dropbox/Org"    |
| アジェンダファイルの指定   | org-agenda-files       | ("~/Dropbox/Org/") |
| デフォルトのノーツ         | org-default-notes-file | "notes.org"        |
| キャプチャ                 | org-capture-templates  | t: Todo j: Journal |

- org-agenda-files -> MobileOrgにPushする

#+begin_src emacs-lisp
  (setq org-directory "~/Dropbox/Org")
  (setq org-agenda-files (quote ("~/Dropbox/Org/")))
  (setq org-default-notes-file "notes.org")
#+end_src

#+RESULTS:
| ~/Dropbox/Org/ |

** キャプチャのテンプレート

#+begin_src emacs-lisp
    (setq org-capture-templates
	  (quote
	   (("t" "Todo" entry (file+headline "todo.org" "Tasks")
	     "* TODO [#B] %?
  SCHEDULED: %t
  ")
	    ("l" "Link as Todo" entry (file+headline "todo.org" "Tasks")
	     "* TODO [#B] %a
  SCHEDULED: %t
  　引用: %i
  %?
  ")
	    ("j" "Journal" entry (file+datetree "journal.org")
	     "* %?
  作成日: %U
  　引用: %i
  リンク: %a
  ")
	    ("b" "Bookmark" entry (file+headline "bookmark.org" "Bookmarks")
	     "* TODO [#B] %a :bookmark:
  SCHEDULED: %t
  　引用: %i
  %?
  ")
	    )))
#+end_src

** Mobile Org関連

- [[https://github.com/matburt/mobileorg-android/wiki][Home · matburt/mobileorg-android Wiki]]


#+begin_src emacs-lisp
  (setq org-mobile-directory "~/Dropbox/アプリ/MobileOrg")
  (setq org-mobile-inbox-for-pull "~/Dropbox/Org/from-mobile.org")
#+end_src

#+RESULTS:
: ~/Dropbox/Org/from-mobile.org

** Babel

| 説明 | 変数名 | 推奨 |
|------+--------+------|
|      |        |      |

#+begin_src emacs-lisp
  (setq org-babel-load-languages
	(quote
	 ((emacs-lisp . t)
	  (dot . t)
	  (java . t)
	  (ruby . t)
	  (sh . t))))
#+end_src

#+RESULTS:
| (emacs-lisp . t) | (dot . t) | (java . t) | (ruby . t) | (sh . t) |

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS:

** 予定表生成追加命令

- [[http://orgmode.org/manual/Matching-tags-and-properties.html][Matching tags and properties - The Org Manual]]
- [[https://www.gnu.org/software/emacs/manual/html_node/org/Special-agenda-views.html][Special agenda views - The Org Manual]]

#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
	(quote
	 (("x" "TODOs without Scheduled" tags-todo "+SCHEDULED=\"\"" nil)
	  ("d" "TODOs without Deadline" tags-todo "+DEADLINE=\"\"" nil)
	  ("p" "私用" tags-todo "+私用" nil)
	  ("P" "私用以外" tags-todo "-私用" nil)
	  ("n" "Agenda and all TODO's" ((agenda "" nil)
					(alltodo "" nil)) nil))))
#+end_src

#+RESULTS:
| x | TODOs without Scheduled | tags-todo                      | +SCHEDULED="" | nil |
| d | TODOs without Deadline  | tags-todo                      | +DEADLINE=""  | nil |
| p | 私用                    | tags-todo                      | +私用         | nil |
| P | 私用以外                | tags-todo                      | -私用         | nil |
| n | Agenda and all TODO's   | ((agenda  nil) (alltodo  nil)) | nil           |     |

** Org Column Title
- Heightをフォントの高さに合わせる

** その他

| 説明                           | 変数名                         | 推奨                          |
|--------------------------------+--------------------------------+-------------------------------|
| バックグランドでのエキスポート | org-export-in-background       | nil                           |
| 画像を表示                     | org-startup-with-inline-images | t                             |
| ToDoアイテムの状態             | org-todo-keywords              | TODO WAIT DONE SOMEDAY CANCEL |
|                                |                                |                               |

** TODOの種類

#+begin_src emacs-lisp
  (setq org-todo-keywords (quote ((sequence "TODO(t)" "WIP(p)" "WAIT(w)" "|" "DONE(d)" "SOMEDAY(s)" "CANCEL(c)"))))
#+end_src

#+RESULTS:
| sequence | TODO(t) | WIP(p) | WAIT(w) |   |   | DONE(d) | SOMEDAY(s) | CANCEL(c) |

** 期日の何日前に予定表（Agenda）に表示するか

#+begin_src emacs-lisp
  (setq org-deadline-warning-days 7)
#+end_src

#+RESULTS:
: 7

** Linewrap

- [[http://superuser.com/questions/299886/linewrap-in-org-mode-of-emacs][Linewrap in Org-mode of Emacs? - Super User]]

#+begin_src emacs-lisp
  (define-key org-mode-map "\M-q" 'toggle-truncate-lines)
#+end_src

#+RESULTS:
: toggle-truncate-lines

** TODO 未整理

#+begin_src emacs-lisp
(custom-set-variables
 '(org-export-in-background nil)
 '(org-src-fontify-natively t))
#+end_src

** Shellのコードの実行にbashを使う
    :PROPERTIES:
    :ID:       adc108a7-c5d7-49b7-b1fb-bfb681d748b0
    :END:
   - デフォルトのシェルがzshなので，設定しておく．
   - 2014-01-24現在，customizationの対応ではない模様．

#+begin_src emacs-lisp
(setq org-babel-sh-command "bash")
#+end_src

** エキスポート
*** Markdown export

#+begin_src emacs-lisp
  (require 'ox-md)
#+end_src

*** mediawiki export

#+begin_src emacs-lisp
  (require 'ox-mediawiki)
#+end_src

*** LaTeX export
**** パッケージの読み込み

#+begin_src emacs-lisp
  (require 'ox-latex)
#+end_src

**** PDFを生成するコマンド

#+begin_src emacs-lisp
  (when (or
	 (eq system-type 'gnu/linux)
	 (eq system-type 'darwin))
    (setq org-latex-pdf-process
	  '("latexmk -e '$latex=q/platex %S/' -e '$bibtex=q/pbibtex %B/' -e '$makeindex=q/mendex -o %D %S/' -e '$dvipdf=q/dvipdfmx -o %D %S/' -norc -gg -pdfdvi %f"))
    )
#+end_src

#+RESULTS:
| latexmk -e '$latex=q/platex %S/' -e '$bibtex=q/pbibtex %B/' -e '$makeindex=q/mendex -o %D %S/' -e '$dvipdf=q/dvipdfmx -o %D %S/' -norc -gg -pdfdvi %f |

**** 文書クラスの設定(jsarticle)

#+begin_src emacs-lisp
  (setq org-latex-default-class "jsarticle")
  (add-to-list 'org-latex-classes
	       '("jsarticle"
		 "\\ifdefined\\ucs
    \\documentclass[uplatex,12pt,a4paper,papersize,dvipdfmx]{jsarticle}
  \\else
    \\documentclass[12pt,a4paper,papersize,dvipdfmx]{jsarticle}
  \\fi
  [NO-DEFAULT-PACKAGES]
  \\usepackage{amsmath}
  \\usepackage{newtxtext,newtxmath}
  \\usepackage{graphicx}
  \\usepackage{hyperref}
  \\usepackage{pxjahyper}
  \\hypersetup{setpagesize=false,colorlinks=true}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+RESULTS:
| beamer    | \documentclass[dvipdfmx]{beamer}\n[NO-DEFAULT-PACKAGES]\n\usepackage{bxdpx-beamer}\n\usepackage{pxjahyper}\n\usepackage{minijs}\n\renewcommand{\kanjifamilydefault}{\gtdefault}\n\AtBeginSection[]\n{\n  \begin{frame}<beamer>{Outline}\n  \tableofcontents[currentsection,currentsubsection]\n  \end{frame}\n}                                                     | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   |
| beamer    | \documentclass[presentation]{beamer}\n[DEFAULT-PACKAGES]\n[PACKAGES]\n[EXTRA]                                                                                                                                                                                                                                                                                       | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |                                      |                                            |
| jsarticle | \ifdefined\ucs\n  \documentclass[uplatex,12pt,a4paper,papersize,dvipdfmx]{jsarticle}\n\else\n  \documentclass[12pt,a4paper,papersize,dvipdfmx]{jsarticle}\n\fi\n[NO-DEFAULT-PACKAGES]\n\usepackage{amsmath}\n\usepackage{newtxtext,newtxmath}\n\usepackage{graphicx}\n\usepackage{hyperref}\n\usepackage{pxjahyper}\n\hypersetup{setpagesize=false,colorlinks=true} | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   |
| article   | \documentclass[11pt]{article}                                                                                                                                                                                                                                                                                                                                       | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   |
| report    | \documentclass[11pt]{report}                                                                                                                                                                                                                                                                                                                                        | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| book      | \documentclass[11pt]{book}                                                                                                                                                                                                                                                                                                                                          | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |

*** LeTex (beamer) export
**** パッケージの読み込み

#+begin_src emacs-lisp
(require 'ox-beamer)
#+end_src

**** 文書クラスの設定(beamer)

#+begin_src emacs-lisp
(add-to-list 'org-latex-classes
	     '("beamer"
	       "\\documentclass[dvipdfmx]{beamer}
[NO-DEFAULT-PACKAGES]
\\usepackage{bxdpx-beamer}
\\usepackage{pxjahyper}
\\usepackage{minijs}
\\renewcommand{\\kanjifamilydefault}{\\gtdefault}
\\AtBeginSection[]
{
  \\begin{frame}<beamer>{Outline}
  \\tableofcontents[currentsection,currentsubsection]
  \\end{frame}
}"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+RESULTS:
| beamer    | \documentclass[dvipdfmx]{beamer}\n[NO-DEFAULT-PACKAGES]\n\usepackage{bxdpx-beamer}\n\usepackage{pxjahyper}\n\usepackage{minijs}\n\renewcommand{\kanjifamilydefault}{\gtdefault}\n\AtBeginSection[]\n{\n  \begin{frame}<beamer>{Outline}\n  \tableofcontents[currentsection,currentsubsection]\n  \end{frame}\n}                                                     | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   |
| beamer    | \documentclass[presentation]{beamer}\n[DEFAULT-PACKAGES]\n[PACKAGES]\n[EXTRA]                                                                                                                                                                                                                                                                                       | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |                                      |                                            |
| jsarticle | \ifdefined\ucs\n  \documentclass[uplatex,12pt,a4paper,papersize,dvipdfmx]{jsarticle}\n\else\n  \documentclass[12pt,a4paper,papersize,dvipdfmx]{jsarticle}\n\fi\n[NO-DEFAULT-PACKAGES]\n\usepackage{amsmath}\n\usepackage{newtxtext,newtxmath}\n\usepackage{graphicx}\n\usepackage{hyperref}\n\usepackage{pxjahyper}\n\hypersetup{setpagesize=false,colorlinks=true} | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   |
| article   | \documentclass[11pt]{article}                                                                                                                                                                                                                                                                                                                                       | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   |
| report    | \documentclass[11pt]{report}                                                                                                                                                                                                                                                                                                                                        | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| book      | \documentclass[11pt]{book}                                                                                                                                                                                                                                                                                                                                          | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |

** TODO WebにHTMLでPublishする                                         :個人設定:
   :PROPERTIES:
   :ID:       fcdb09c8-3a9a-4ea9-9482-10d445b6db9f
   :END:
   - customzationに移動する？

#+begin_src emacs-lisp
(setq org-publish-project-alist
      '(
	("chubachi.net-notes"
	 :base-directory "~/Ubuntu One/WebSites/chubachi.net/org/"
	 :base-extension "org"
	 :publishing-directory "~/Ubuntu One/WebSites/chubachi.net/www/"
	 :publishing-function org-html-publish-to-html
	 ;; :headline-levels 3
	 ;; :section-numbers nil
	 ;; :with-toc nil
	 ;; :html-head "<link rel=\"stylesheet\"
	 ;;               href=\"../other/mystyle.css\" type=\"text/css\"/>"
	 ;; :html-preamble t
	 :recursive t
	 )
	("chubachi.net-static"
	 :base-directory "~/Ubuntu One/WebSites/chubachi.net/org/"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
	 :publishing-directory "~/Ubuntu One/WebSites/chubachi.net/www/"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )
	("chubachi.net"
	 :components ("chubachi.net-notes" "chubachi.net-static"))
      ))
#+end_src

** WordPressに記事を投稿（org2blog）                                   :個人設定:
  :PROPERTIES:
  :ID:       o2b:83d5ddbc-5e84-446c-826a-a2702eb6b997
  :POST_DATE: [2013-12-28 土 19:16]
  :POSTID:   18
  :BLOG:     blog.chubachi.net
  :END:

   - 使い方は [[https://github.com/punchagan/org2blog][punchagan/org2blog]] を参照．
   - ソースコードを表示させるには
     [[http://wordpress.org/plugins/syntaxhighlighter/][WordPress › SyntaxHighlighter Evolved « WordPress Plugins]]
     をインストールしておく．
   - emacs lispには対応していない．残念．

   |--------------------------+--------------------------|
   | 機能                     | コマンド                 |
   |--------------------------+--------------------------|
   | ログイン                 | org2blog/wp-login        |
   | 新規投稿                 | org2blog/wp-new-entry    |
   |--------------------------+--------------------------|
   | 草稿として投稿           | C-c d                    |
   | 公開                     | C-c p                    |
   | 草稿として草稿（ページ） | C-c D                    |
   | 公開（ページ）           | C-c P                    |
   |--------------------------+--------------------------|
   | 下位層を投稿             | org2blog/wp-post-subtree |
   |--------------------------+--------------------------|

#+begin_src emacs-lisp
(dolist (package '(org2blog xml-rpc metaweblog htmlize))
  (when (not (package-installed-p package))
    (package-install package)))
#+end_src

#+begin_src emacs-lisp
(require 'xml-rpc)
(require 'metaweblog)
(require 'org2blog-autoloads)
#+end_src

#+RESULTS:
: org2blog-autoloads

- org2blogを使うと，subtreeをwordpressに投稿できる．
#+begin_src emacs-lisp
(setq org2blog/wp-blog-alist
      '(("blog.chubachi.net"
	 :url "http://blog.chubachi.net/xmlrpc.php"
	 :username "yc"
	 :default-title "Emacs title"
	 :default-categories ("org2blog" "emacs")
	 :tags-as-categories nil)
	))
#+end_src


#+begin_src emacs-lisp
  (setq org2blog/wp-use-sourcecode-shortcode t)
#+end_src

** カラムのタイトルのフォント

#+begin_src emacs-lisp
  (custom-set-faces
   '(org-column-title
     ((t (:background "grey30" :underline t :weight bold :height 135)))))
#+end_src

*** 設定方法
  - C-c C-lでOrg形式のリンク挿入
  - [[http://stackoverflow.com/questions/7464951/how-to-make-org-protocol-work][firefox - How to make org-protocol work? - Stack Overflow]]
    - gistで公開してあげようかな
  - [[http://d.hatena.ne.jp/reppets/20111109/1320846292][Unityランチャーに自分でインストール/ビルドしたアプリケーションを登録する - reppets.log.1]]
  - [[http://kb.mozillazine.org/Register_protocol#Linux][Register protocol - MozillaZine Knowledge Base]]
  - [[http://orgmode.org/worg/org-contrib/org-protocol.html#sec-3-6]]
    - 古い

[[http://orgmode.org/worg/org-contrib/org-protocol.html#sec-3-6][* org-protocol
org-protocol.el – Intercept calls from emacsclient to trigger custom actions]]

#+begin_src
javascript:location.href='org-protocol://store-link://'+encodeURIComponent(location.href)
javascript:location.href='org-protocol://capture://t/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())
#+end_src

*** 有効化

#+begin_src emacs-lisp
  (require 'org-protocol)
#+end_src

#+RESULTS:
: org-protocol

* Helm
** 参考
   - [[http://d.hatena.ne.jp/a_bicky/20140104/1388822688][Helm をストレスなく使うための個人的な設定 - あらびき日記]]
   - [[https://github.com/emacs-helm/helm/wiki][Home · emacs-helm/helm Wiki]]
   - [[http://sleepboy-zzz.blogspot.jp/2012/09/anythinghelm.html][memo: AnythingからHelmに移行しました]]
   - [[http://www49.atwiki.jp/ntemacs/m/pages/32.html][NTEmacs @ ウィキ - helm を使うための設定 - @ｳｨｷﾓﾊﾞｲﾙ]]
   - [[http://qiita.com/akisute3@github/items/7c8ea3970e4cbb7baa97][Emacs - helm-mode 有効時でも helm-find-files は無効にする - Qiita {キータ}]]
   - [[http://www.fan.gr.jp/~ring/doc/elisp_19/elisp-jp_14.html#IDX592][GNU Emacs Lispリファレンス・マニュアル: 12. マクロ]]
     - 逆引用符は`,'の引数を評価し、 リスト構造にその値を入れます。

** パッケージ

#+begin_src emacs-lisp
  (my/package-install 'helm)
  (require 'helm-config)
#+end_src

** helm-miniを有効にする

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c h") 'helm-mini)
#+end_src

** helm-modeを有効にする
- [[https://github.com/emacs-helm/helm/wiki#18-helm-mode][Home · emacs-helm/helm Wiki]]

Customize with: helm-completing-read-handlers-alist
See C-h v helm-completing-read-handlers-alist for more infos.

#+begin_src emacs-lisp
  (helm-mode 1)
#+end_src

** C-h
C-h でバックスペースと同じように文字を削除できるようにする

#+begin_src emacs-lisp
(define-key helm-map (kbd "C-h") 'delete-backward-char)
(define-key helm-find-files-map (kbd "C-h") 'delete-backward-char)
#+end_src

** C-k
ミニバッファで C-k 入力時にカーソル以降を削除する

#+begin_src emacs-lisp
(setq helm-delete-minibuffer-contents-from-point t)
#+end_src

** 他のパッケージ

#+begin_src emacs-lisp
(dolist (package '(helm-descbinds
		   helm-migemo
		   helm-themes
		   imenu-anywhere
		   helm-c-yasnippet))
  (when (not (package-installed-p package))
    (package-install package)))
#+end_src

** ???

#+begin_src emacs-lisp
(require 'helm-command)
(require 'helm-descbinds)

(setq helm-idle-delay             0.1
      helm-input-idle-delay       0.1
      helm-candidate-number-limit 200)
#+end_src

** helm-migemo - ローマ字検索

#+begin_src emacs-lisp
  (when (executable-find "cmigemo")
    (require 'helm-migemo)
    (setq helm-use-migemo t)

    (defadvice helm-c-apropos
      (around ad-helm-apropos activate)
      "候補が表示されないときがあるので migemoらないように設定."
      (let ((helm-use-migemo nil))
	ad-do-it))

    (defadvice helm-M-x
      (around ad-helm-M-x activate)
      "候補が表示されないときがあるので migemoらないように設定."
      (let ((helm-use-migemo nil))
	ad-do-it))
    )
#+end_src

** その他

#+begin_src emacs-lisp
(require 'helm-imenu)
(setq imenu-auto-rescan t)
(setq imenu-after-jump-hook (lambda () (recenter 10))) ; 選択後の表示位置を調整

(require 'helm-themes)

(require 'helm-c-yasnippet)
#+end_src

** package listをhelmで選択

#+begin_src emacs-lisp
(require 'helm-package)
#+end_src

* smartrep.el
- [[http://sheephead.homelinux.org/2011/12/19/6930/][連続操作を素敵にするsmartrep.el作った - sheephead]]

** パッケージのインストール

#+begin_src emacs-lisp
  (dolist (package '(smartrep))
    (when (not (package-installed-p package))
      (package-install package)))
  (require 'smartrep)
#+end_src

** org-mode用設定

- eval-after-loadにより，orgがロードされた後，
  もしくは，既にロードされていれば即，実行する．

#+begin_src emacs-lisp
  (eval-after-load "org"
    '(progn
       (smartrep-define-key
	   org-mode-map
	   "C-c" '(("C-n" . (lambda ()
			      (outline-next-visible-heading 1)))
		   ("C-p" . (lambda ()
			      (outline-previous-visible-heading 1)))))
       ))
#+end_src

* markdown
  - [[http://jblevins.org/projects/markdown-mode/][Emacs Markdown Mode]]

#+begin_src emacs-lisp
  (dolist (package '(markdown-mode))
    (when (not (package-installed-p package))
      (package-install package)))

  (autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+end_src

  - markdownモードでアウトラインを有効にする

#+begin_src emacs-lisp
  (add-hook 'markdown-mode-hook
	    '(lambda () (outline-minor-mode t)))
#+end_src

* MediaWiki
  - [[http://www.emacswiki.org/emacs/MediaWikiMode][EmacsWiki: Media Wiki Mode]]

#+begin_src emacs-lisp
  (dolist (package '(mediawiki))
    (when (not (package-installed-p package))
      (package-install package)))
  (require 'mediawiki)
#+end_src

* graphviz

#+begin_src emacs-lisp
(dolist (package '(graphviz-dot-mode))
  (when (not (package-installed-p package))
    (package-install package)))

(add-to-list 'auto-mode-alist '("\\.dot$" . graphviz-dot-mode))
#+end_src

#+begin_src emacs-lisp
(setq graphviz-dot-preview-extension "pdf")
#+end_src

* キーバインディング
** 自作関数

#+begin_src emacs-lisp
  (defun my/fullscreen ()
    (interactive)
    (set-frame-parameter
     nil
     'fullscreen
     (if (frame-parameter nil 'fullscreen)
	 nil
       'fullboth)))

  (defun my/open-init-folder()
    "設定フォルダを開きます．"
    (interactive)
    (find-file "~/.emacs.d/init.org"))

  (global-set-key [f11] 'my/fullscreen)
  (global-set-key (kbd "<f1>") 'my/open-init-folder)
#+end_src
** グローバル
#+begin_src emacs-lisp
  ;; ================================================================
  ;; パッケージのインストール
  ;; ================================================================
  (dolist (package '(region-bindings-mode key-chord))
    (when (not (package-installed-p package))
      (package-install package)))


  ;; ================================================================
  ;; グローバルマップの設定
  ;; ================================================================

  ;;; magit
  (global-set-key (kbd "C-x g") 'magit-status)

  ;; ================================================================
  ;; グローバルマップの設定(org-mode)
  ;; ================================================================
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'org-iswitchb)

  ;; ================================================================
  ;; グローバルマップの設定(helm)
  ;; ================================================================
  (let ((key-and-func
	 `(
	   (,(kbd "M-x")     helm-M-x)
	   (,(kbd "M-y")     helm-show-kill-ring)
	   (,(kbd "C-x C-f") helm-find-files)
  ;;         (,(kbd "C-r")   helm-for-files)
  ;;         (,(kbd "C-^")   helm-c-apropos)
  ;;         (,(kbd "C-;")   helm-resume)
  ;;         (,(kbd "M-s")   helm-occur)
  ;;         (,(kbd "M-z")   helm-do-grep)
  ;;         (,(kbd "C-S-h") helm-descbinds)
	   )))
    (loop for (key func) in key-and-func
	  do (global-set-key key func)))

#+end_src

** 個人用キーマップの設定

#+begin_src emacs-lisp
  (defun my/other-window-backward ()
    "Move to other window backward."
    (interactive)
    (other-window -1))

  (define-prefix-command 'personal-map)
  (global-set-key (kbd "C-.") 'personal-map)

  (define-key 'personal-map (kbd "C-n") 'other-window)
  (define-key 'personal-map (kbd "C-p") 'my/other-window-backward)

  (define-key 'personal-map (kbd "m") 'imenu)
  (define-key 'personal-map (kbd "h") 'helm-mini)

  (define-key 'personal-map (kbd "i") 'yas-insert-snippet)
  (define-key 'personal-map (kbd "n") 'yas-new-snippet)
  (define-key 'personal-map (kbd "v") 'yas-visit-snippet-file)

  (define-key 'personal-map (kbd "y") 'helm-c-yas-complete)
  (define-key 'personal-map (kbd "s") 'helm-c-yas-create-snippet-on-region)

  (define-key 'personal-map (kbd "b") 'org-beamer-export-to-pdf)

  (cond ((eq system-type 'gnu/linux)
	 (define-key 'personal-map (kbd "p") 'evince-forward-search))
	((eq system-type 'darwin)
	 (define-key 'personal-map (kbd "p") 'skim-forward-search)))

  ;; ================================================================
  ;; リージョンがある間のキーバインディングを変更する
  ;; ================================================================

  (require 'region-bindings-mode)
  (region-bindings-mode-enable)
  (define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)
  (define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
  (define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
  (define-key region-bindings-mode-map "m" 'mc/mark-more-like-this-extended)
  (define-key region-bindings-mode-map "e" 'mc/edit-lines)
  (setq region-bindings-mode-disabled-modes '(mew-summary-mode))

  ;; ================================================================
  ;; key-chordの設定をする
  ;; ================================================================
  (require 'key-chord)
  (key-chord-mode 1)

  (key-chord-define-global "gc" 'my/other-window-backward)
  (key-chord-define-global "cr" 'other-window)
#+end_src

#+RESULTS:
: other-window

* Programming

#+begin_src emacs-lisp
;; ================================================================
;; パッケージのインストール
;; ================================================================
(dolist (package '(multiple-cursors yasnippet))
  (when (not (package-installed-p package))
    (package-install package)))

#+end_src
* 自動補間:auto-complete

#+begin_src emacs-lisp
    (my/package-install 'auto-complete)
    (require 'auto-complete-config)
    (eval-after-load "auto-complete-config"
      '(progn
	 (message "%s" "%% auto-complete-configを読み込みました. %%")
	 (ac-config-default)
	 (setq ac-comphist-file "~/.emacs.d/data/ac-comphist.dat")
	 (define-key ac-complete-mode-map "\C-n" 'ac-next)
	 (define-key ac-complete-mode-map "\C-p" 'ac-previous)))
#+end_src

#+RESULTS:
: ~/.emacs.d/data/ac-comphist.dat

* 複数のカーソルを扱う:multiple-cursors

#+begin_src emacs-lisp
(require 'multiple-cursors)
#+end_src

#+RESULTS:
: multiple-cursors

#+begin_src emacs-lisp
;; ================================================================
;; Emacs Lisp
;; ================================================================

(add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
#+end_src

* Undo Tree
#+begin_src emacs-lisp
(dolist (package '(undo-tree))
  (when (not (package-installed-p package))
    (package-install package)))

(require 'undo-tree)
(global-undo-tree-mode t)
#+end_src
* w3m
#+begin_src emacs-lisp
(dolist (package '(w3m))
  (when (not (package-installed-p package))
    (condition-case nil
	(package-install package)
      (error (message "%s" "Please Install w3m command")))))
#+end_src

* Ruby
#+begin_src emacs-lisp
  ;; S式から正規表現を作成する - by shigemk2
  ;; - http://d.hatena.ne.jp/shigemk2/20120419/1334762456

  ;; EmacsでRubyの開発環境をめちゃガチャパワーアップしたまとめ | Futurismo
  ;; http://hmi-me.ciao.jp/wordpress/archives/1295

  ;;; Code:

  ;; ================================================================
  ;; パッケージのインストール
  ;; ================================================================
  (dolist (package '(flymake-ruby
		     flymake-haml
		     flymake-sass
		     flymake-coffee
		     smart-compile))
    (when (not (package-installed-p package))
      (package-install package)))

  (autoload 'ruby-mode "ruby-mode"
    "Mode for editing ruby source files" t)
  (require 'ruby-mode)

  ;; ================================================================
  ;; Ruby DSLs
  ;; ================================================================

  (add-to-list 'auto-mode-alist '("Capfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Guardfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Vagrantfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Berksfile" . ruby-mode))

  ;; ================================================================
  ;; outline-minnor-mode
  ;; ================================================================

  (require 'outline)
  (add-hook 'ruby-mode-hook
	    (function
	     (lambda ()
	       (defun ruby-outline-level ()
		 (or (and (match-string 1)
			  (or (cdr (assoc (match-string 1) outline-heading-alist))
			      (- (match-end 1) (match-beginning 1))))
		     (cdr (assoc (match-string 0) outline-heading-alist))
		     (- (match-end 0) (match-beginning 0))))

	       (set (make-local-variable 'outline-level) 'ruby-outline-level)

	       (set (make-local-variable 'outline-regexp)
		    (rx (group (* " "))
			bow
			(or "begin" "case" "class" "def" "else" "elsif"
			    "ensure" "if" "module" "rescue" "when" "unless"
			    "private")
			eow))
	       (outline-minor-mode))))

  (add-hook 'rspec-mode-hook
	    (function
	     (lambda ()
	       (defun rspec-outline-level ()
		 (or (and (match-string 1)
			  (or (cdr (assoc (match-string 1) outline-heading-alist))
			      (- (match-end 1) (match-beginning 1))))
		     (cdr (assoc (match-string 0) outline-heading-alist))
		     (- (match-end 0) (match-beginning 0))))

	       (set (make-local-variable 'outline-level) 'rspec-outline-level)

	       (set (make-local-variable 'outline-regexp)
		    (rx (group (* " "))
			bow
			(or "context" "describe" "it" "subject")
			eow))
	       (outline-minor-mode))))

  ;; ================================================================
  ;; flymake関係
  ;; ================================================================

  (require 'flymake-ruby)
  (add-hook 'ruby-mode-hook 'flymake-ruby-load)

  (require 'flymake-haml)
  (add-hook 'haml-mode-hook 'flymake-haml-load)

  (require 'flymake-sass)
  (add-hook 'sass-mode-hook 'flymake-sass-load)

  (require 'flymake-coffee)
  (add-hook 'coffee-mode-hook 'flymake-coffee-load)

  ;; ================================================================
  ;; Use the right Ruby with Emacs and rbenv - Fist of Senn
  ;; - http://blog.senny.ch/blog/2013/02/11/use-the-right-ruby-with-emacs-and-rbenv/
  ;; ================================================================
  ;; (prelude-require-package 'rbenv)

  ;; ;; Setting rbenv path
  ;; (setenv "PATH" (concat (getenv "HOME") "/.rbenv/shims:"
  ;;                        (getenv "HOME") "/.rbenv/bin:"
  ;;                        (getenv "PATH")))
  ;; (setq exec-path (cons (concat (getenv "HOME") "/.rbenv/shims")
  ;;                       (cons (concat (getenv "HOME") "/.rbenv/bin") exec-path)))

  ;; ================================================================
  ;; 賢いコンパイル
  ;; ================================================================

  (require 'smart-compile)

  (define-key ruby-mode-map (kbd "C-c c") 'smart-compile)
  (define-key ruby-mode-map (kbd "C-c C-c") (kbd "C-c c C-m"))

  (setq smart-compile-alist
	(quote ((emacs-lisp-mode emacs-lisp-byte-compile)
		(html-mode browse-url-of-buffer)
		(nxhtml-mode browse-url-of-buffer)
		(html-helper-mode browse-url-of-buffer)
		(octave-mode run-octave)
		("\\.c\\'" . "gcc -O2 %f -lm -o %n")
		("\\.[Cc]+[Pp]*\\'" . "g++ -O2 %f -lm -o %n")
		("\\.m\\'" . "gcc -O2 %f -lobjc -lpthread -o %n")
		("\\.java\\'" . "javac %f")
		("\\.php\\'" . "php -l %f")
		("\\.f90\\'" . "gfortran %f -o %n")
		("\\.[Ff]\\'" . "gfortran %f -o %n")
		("\\.cron\\(tab\\)?\\'" . "crontab %f")
		("\\.tex\\'" tex-file)
		("\\.texi\\'" . "makeinfo %f")
		("\\.mp\\'" . "mptopdf %f")
		("\\.pl\\'" . "perl -cw %f")
		("\\.rb\\'" . "bundle exec ruby %f"))))

  ;; ================================================================
  ;; Emacsで保存時にFirefoxのタブを探してリロード - Qiita [キータ]
  ;; - http://qiita.com/hakomo/items/9a99115f8911b55957bb
  ;; ================================================================
  (require 'moz)

  (defun my/reload-firefox ()
    "Reload firefox."
    (interactive)
    (comint-send-string (inferior-moz-process) "BrowserReload();"))

  (defun my/run-rake-yard ()
    "Run rake yard."
    (interactive)
    (shell-command "rake yard"))

  (define-key ruby-mode-map (kbd "C-c y") (lambda ()
					    (interactive)
					    (my/run-rake-yard)
					    (my/reload-firefox)))
#+end_src

* PHP

#+begin_src emacs-lisp
  (dolist (package '(php-mode))
    (when (not (package-installed-p package))
      (package-install package)))
#+end_src

#+RESULTS:

* YaTeX

#+begin_src emacs-lisp
;; ================================================================
;; YaTeX - TeX Wiki
;; - http://oku.edu.mie-u.ac.jp/~okumura/texwiki/?YaTeX#nec42ee2
;; ================================================================
(autoload 'yatex-mode "yatex" "Yet Another LaTeX mode" t)
(setq auto-mode-alist
      (append '(("\\.tex$" . yatex-mode)
		("\\.ltx$" . yatex-mode)
		("\\.cls$" . yatex-mode)
		("\\.sty$" . yatex-mode)
		("\\.clo$" . yatex-mode)
		("\\.bbl$" . yatex-mode)) auto-mode-alist))
(setq YaTeX-inhibit-prefix-letter t)
(setq YaTeX-kanji-code nil)
(setq YaTeX-use-LaTeX2e t)
(setq YaTeX-use-AMS-LaTeX t)

;; ================================================================
;; RefTeX with YaTeX
;; ================================================================
(add-hook 'yatex-mode-hook 'turn-on-reftex)
(add-hook 'yatex-mode-hook
	  '(lambda ()
	     (reftex-mode 1)
	     (define-key reftex-mode-map (concat YaTeX-prefix ">") 'YaTeX-comment-region)
	     (define-key reftex-mode-map (concat YaTeX-prefix "<") 'YaTeX-uncomment-region)))

;; ================================================================
;; Outline minor mode for YaTeX
;; See http://www.math.s.chiba-u.ac.jp/~matsu/emacs/emacs20/outline.html
;; ================================================================
(add-hook 'yatex-mode-hook
	  '(lambda () (outline-minor-mode t)))

(make-variable-buffer-local 'outline-regexp)
(add-hook
 'yatex-mode-hook
 (function
  (lambda ()
    (progn
      (setq outline-level 'latex-outline-level)
      (setq outline-regexp
	    (concat "[ \t]*\\\\\\(documentstyle\\|documentclass\\|"
		    "chapter\\|section\\|subsection\\|subsubsection\\)"
		    "\\*?[ \t]*[[{]")
     )))))

(make-variable-buffer-local 'outline-level)
(setq-default outline-level 'outline-level)
(defun latex-outline-level ()
  (save-excursion
    (looking-at outline-regexp)
    (let ((title (buffer-substring (match-beginning 1) (match-end 1))))
      (cond ((equal (substring title 0 4) "docu") 15)
	    ((equal (substring title 0 4) "chap") 0)
	    ((equal (substring title 0 4) "appe") 0)
	    (t (length title))))))

;; ================================================================
;; BibTeX
;; ================================================================
(add-hook 'bibtex-mode-hook
	  '(lambda ()
	     (outline-minor-mode)))

;; ================================================================
;; IPA Fonts
;; ================================================================
(setq YaTeX-dvipdf-command "dvipdfmx -f ptex-ipa")

;; ================================================================
;; auto-fill-mode
;; ================================================================
(add-hook 'yatex-mode-hook
	  '(lambda ()
	     (auto-fill-mode 1)))
#+end_src

* Clean Mode Line
#+begin_src emacs-lisp
;;; 80-clean-mode-line.el --- <description>
;;; Commentary:

;; mode-lineのモード情報をコンパクトに表示する- Life is very short
;; - http://d.hatena.ne.jp/syohex/20130131/1359646452

;;; Code:

(defvar mode-line-cleaner-alist
  '( ;; For minor-mode, first char is 'space'
    (yas-minor-mode . " Ys")
    (paredit-mode . " Pe")
    (eldoc-mode . "")
    (abbrev-mode . "")
    (undo-tree-mode . " Ut")
    (elisp-slime-nav-mode . " EN")
    (helm-gtags-mode . " HG")
    (flymake-mode . " Fm")
    (outline-minor-mode . " Ol")
    (ibus-mode . " IB")
    ;; Major modes
    (lisp-interaction-mode . "Li")
    (python-mode . "Py")
    (ruby-mode   . "Rb")
    (emacs-lisp-mode . "El")
    (markdown-mode . "Md")))

(defun clean-mode-line ()
  (interactive)
  (loop for (mode . mode-str) in mode-line-cleaner-alist
	do
	(let ((old-mode-str (cdr (assq mode minor-mode-alist))))
	  (when old-mode-str
	    (setcar old-mode-str mode-str))
	  ;; major mode
	  (when (eq mode major-mode)
	    (setq mode-name mode-str)))))

(add-hook 'after-change-major-mode-hook 'clean-mode-line)

;;; 80-clean-mode-line.el ends here
#+end_src

* TODO Buffer Move
  :PROPERTIES:
  :ID:       09433d16-46c7-4fe8-8708-9382a1270dc0
  :END:

#+begin_src emacs-lisp :tangle no
  ;; パッケージのインストール
  (setq package-list '(buffer-move))
  (dolist (package package-list)
    (when (not (package-installed-p package))
      (package-install package)))

  ; buffer-move : have to add your own keys
  (global-set-key (kbd "<C-S-up>")     'buf-move-up)
  (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  (global-set-key (kbd "<C-S-right>")  'buf-move-right)
#+end_src

* TODO tab bar
  :PROPERTIES:
  :ID:       e4164ff6-d405-47f7-8ed7-838c9ffa215d
  :END:
#+begin_src emacs-lisp :tangle no
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; tabbar.el
  ;;
  ;; [Emacsにタブ機能を追加するtabbar.elの導入 - 12FF5B8](http://hico-horiuchi.hateblo.jp/entry/20121208/1354975316)

  ;; パッケージのインストール
  (setq package-list '(tabbar))
  (dolist (package package-list)
    (when (not (package-installed-p package))
      (package-install package)))

  (require 'tabbar)
  (tabbar-mode)
  (global-set-key "\M-]" 'tabbar-forward)  ; 次のタブ
  (global-set-key "\M-[" 'tabbar-backward) ; 前のタブ
  ;; タブ上でマウスホイールを使わない
  (tabbar-mwheel-mode nil)
  ;; グループを使わない
  (setq tabbar-buffer-groups-function nil)
  ;; 左側のボタンを消す
  (dolist (btn '(tabbar-buffer-home-button
		 tabbar-scroll-left-button
		 tabbar-scroll-right-button))
    (set btn (cons (cons "" nil)
		   (cons "" nil))))
#+end_src

* TODO rcode tools
  :PROPERTIES:
  :ID:       21e85321-7b0d-479f-aa36-66c3d9515adc
  :END:

#+begin_src emacs-lisp :tangle no
  (add-to-list 'load-path "~/.rbenv/versions/2.0.0-p195/lib/ruby/gems/2.0.0/gems/rcodetools-0.8.5.0")

  ;; rcodetools
  (require 'rcodetools)
  (setq rct-find-tag-if-available nil)
  (defun ruby-mode-hook-rcodetools ()
    (define-key ruby-mode-map (kbd "<C-return>") 'rct-complete-symbol)
    (define-key ruby-mode-map "\M-\C-i" 'rct-complete-symbol)
    (define-key ruby-mode-map "\C-c\C-t" 'ruby-toggle-buffer)
    (define-key ruby-mode-map "\C-c\C-d" 'xmp)
    (define-key ruby-mode-map "\C-c\C-f" 'rct-ri))
  (add-hook 'ruby-mode-hook 'ruby-mode-hook-rcodetools)

  (setq rct-get-all-methods-command "PAGER=cat fri -l")
  ;; See docs
#+end_src

* TODO 行番号表示

- 行番号表示をするとorg-modeが遅くなるらしい
  - [[http://stackoverflow.com/questions/5229705/emacs-org-mode-turn-off-line-numbers][Emacs Org-Mode: Turn off line numbers - Stack Overflow]]

#+begin_src emacs-lisp :tangle no
(global-linum-mode t)
(set-face-attribute 'linum nil :foreground "yellow" :height 0.8)
(setq linum-format "%4d")
#+end_src

* おためし
** TODO Diff

- [[http://stackoverflow.com/questions/331569/diff-save-or-kill-when-killing-buffers-in-emacs]["Diff, save or kill" when killing buffers in Emacs - Stack Overflow]]

#+begin_src emacs-lisp :tangle no
(defadvice kill-buffer (around my-kill-buffer-check activate)
  "Prompt when a buffer is about to be killed."
  (let* ((buffer-file-name (buffer-file-name))
	 backup-file)
    ;; see 'backup-buffer
    (if (and (buffer-modified-p)
	     buffer-file-name
	     (file-exists-p buffer-file-name)
	     (setq backup-file (car (find-backup-file-name buffer-file-name))))
	(let ((answer (completing-read (format "Buffer modified %s, (d)iff, (s)ave, (k)ill? " (buffer-name))
				       '("d" "s" "k") nil t)))
	  (cond ((equal answer "d")
		 (set-buffer-modified-p nil)
		 (let ((orig-buffer (current-buffer))
		       (file-to-diff (if (file-newer-than-file-p buffer-file-name backup-file)
					 buffer-file-name
				       backup-file)))
		   (set-buffer (get-buffer-create (format "%s last-revision" (file-name-nondirectory file-to-diff))))
		   (buffer-disable-undo)
		   (insert-file-contents file-to-diff nil nil nil t)
		   (set-buffer-modified-p nil)
		   (setq buffer-read-only t)
		   (ediff-buffers (current-buffer) orig-buffer)))
		((equal answer "k")
		 (set-buffer-modified-p nil)
		 ad-do-it)
		(t
		 (save-buffer)
		 ad-do-it)))
      ad-do-it)))
#+end_src

#+RESULTS:
: kill-buffer

** ibuffer

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

* linux用設定
** Linux YaTeX

#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)

    (setq YaTeX-dvi2-command-ext-alist
	  '(("texworks\\|evince\\|okular\\|zathura\\|qpdfview\\|pdfviewer\\|mupdf\\|xpdf\\|firefox\\|chromium\\|acroread\\|pdfopen" . ".pdf")))
    (setq tex-command "ptex2pdf -l -ot '-synctex=1'")
  ;;(setq tex-command "ptex2pdf -l -u -ot '-synctex=1'")
  ;;(setq tex-command "pdfplatex")
  ;;(setq tex-command "pdfplatex2")
  ;;(setq tex-command "pdfuplatex")
  ;;(setq tex-command "pdfuplatex2")
  ;;(setq tex-command "pdflatex -synctex=1")
  ;;(setq tex-command "lualatex -synctex=1")
  ;;(setq tex-command "luajitlatex -synctex=1")
  ;;(setq tex-command "xelatex -synctex=1")
  ;;(setq tex-command "latexmk")
  ;(setq tex-command "latexmk -e '$latex=q/platex %O -synctex=1 %S/' -e '$bibtex=q/pbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
  ;(setq tex-command "latexmk -e '$latex=q/platex %O -synctex=1 %S/' -e '$bibtex=q/pbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -g > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps")
  ;(setq tex-command "latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
  ;(setq tex-command "latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -u > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps")
  ;(setq tex-command "latexmk -e '$pdflatex=q/pdflatex %O -synctex=1 %S/' -e '$bibtex=q/bibtex %O %B/' -e '$makeindex=q/makeindex %O -o %D %S/' -norc -gg -pdf")
  ;(setq tex-command "latexmk -e '$pdflatex=q/lualatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -lualatex")
  ;(setq tex-command "latexmk -e '$pdflatex=q/luajitlatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -lualatex")
  ;(setq tex-command "latexmk -e '$pdflatex=q/xelatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -xelatex")
  (setq bibtex-command (cond ((string-match "uplatex\\|-u" tex-command) "upbibtex")
			     ((string-match "platex" tex-command) "pbibtex")
			     ((string-match "lualatex\\|luajitlatex\\|xelatex" tex-command) "bibtexu")
			     ((string-match "pdflatex\\|latex" tex-command) "bibtex")
			     (t "pbibtex")))
  (setq makeindex-command (cond ((string-match "uplatex\\|-u" tex-command) "mendex")
				((string-match "platex" tex-command) "mendex")
				((string-match "lualatex\\|luajitlatex\\|xelatex" tex-command) "texindy")
				((string-match "pdflatex\\|latex" tex-command) "makeindex")
				(t "mendex")))

  (setq dvi2-command "evince")
  ;(setq dvi2-command "okular --unique")
  ;(setq dvi2-command "zathura -s -x \"emacsclient --no-wait +%{line} %{input}\"")
  ;(setq dvi2-command "qpdfview --unique")
  ;(setq dvi2-command "pdfviewer")
  ;(setq dvi2-command "texworks")
  ;(setq dvi2-command "mupdf")
  ;(setq dvi2-command "firefox -new-window")
  ;(setq dvi2-command "chromium --new-window")
  (setq dviprint-command-format "acroread `echo %s | sed -e \"s/\\.[^.]*$/\\.pdf/\"`")

  (defun evince-forward-search ()
    (interactive)
    (progn
      (process-kill-without-query
       (start-process
	"fwdevince"
	nil
	"fwdevince"
	(expand-file-name
	 (concat (file-name-sans-extension (or YaTeX-parent-file
					       (save-excursion
						 (YaTeX-visit-main t)
						 buffer-file-name)))
		 ".pdf"))
	(number-to-string (save-restriction
			    (widen)
			    (count-lines (point-min) (point))))
	(buffer-name)))))

  (require 'dbus)

  (defun un-urlify (fname-or-url)
    "A trivial function that replaces a prefix of file:/// with just /."
    (if (string= (substring fname-or-url 0 8) "file:///")
	(substring fname-or-url 7)
      fname-or-url))

  (defun evince-inverse-search (file linecol &rest ignored)
    (let* ((fname (un-urlify file))
	   (buf (find-file fname))
	   (line (car linecol))
	   (col (cadr linecol)))
      (if (null buf)
	  (message "[Synctex]: %s is not opened..." fname)
	(switch-to-buffer buf)
	(goto-line (car linecol))
	(unless (= col -1)
	  (move-to-column col)))))

  (dbus-register-signal
   :session nil "/org/gnome/evince/Window/0"
   "org.gnome.evince.Window" "SyncSource"
   'evince-inverse-search)

  (defun okular-forward-search ()
    (interactive)
    (progn
      (process-kill-without-query
       (start-process
	"okular"
	nil
	"okular"
	"--unique"
	(concat (expand-file-name
		 (concat (file-name-sans-extension (or YaTeX-parent-file
						       (save-excursion
							 (YaTeX-visit-main t)
							 buffer-file-name)))
			 ".pdf"))
		"#src:"
		(number-to-string (save-restriction
				    (widen)
				    (count-lines (point-min) (point))))
		(buffer-file-name))))))

  (add-hook 'yatex-mode-hook
	    '(lambda ()
	       (define-key YaTeX-mode-map (kbd "C-c o") 'okular-forward-search)))

  (defun qpdfview-forward-search ()
    (interactive)
    (progn
      (process-kill-without-query
       (start-process
	"qpdfview"
	nil
	"qpdfview"
	"--unique"
	(concat (expand-file-name
		 (concat (file-name-sans-extension (or YaTeX-parent-file
						       (save-excursion
							 (YaTeX-visit-main t)
							 buffer-file-name)))
			 ".pdf"))
		"#src:"
		(buffer-name)
		":"
		(number-to-string (save-restriction
				    (widen)
				    (count-lines (point-min) (point))))
		":0")))))

  (add-hook 'yatex-mode-hook
	    '(lambda ()
	       (define-key YaTeX-mode-map (kbd "C-c q") 'qpdfview-forward-search)))

  (defun pdfviewer-forward-search ()
    (interactive)
    (progn
      (process-kill-without-query
       (start-process
	"pdfviewer"
	nil
	"pdfviewer"
	(concat "file:"
		(expand-file-name
		 (concat (file-name-sans-extension (or YaTeX-parent-file
						       (save-excursion
							 (YaTeX-visit-main t)
							 buffer-file-name)))
			 ".pdf"))
		"#src:"
		(number-to-string (save-restriction
				    (widen)
				    (count-lines (point-min) (point))))
		" "
		(buffer-name))))))

  (add-hook 'yatex-mode-hook
	    '(lambda ()
	       (define-key YaTeX-mode-map (kbd "C-c p") 'pdfviewer-forward-search)))

  (add-hook 'yatex-mode-hook
	    '(lambda ()
	       (auto-fill-mode -1)))
  )
#+end_src

#+RESULTS:

** dbus for YaTeX
- http://oku.edu.mie-u.ac.jp/~okumura/texwiki/?Emacs#v19f2543

#+begin_src emacs-lisp
  (when (eq system-type 'gnu/linux)
    (require 'dbus)

    (defun un-urlify (fname-or-url)
      "A trivial function that replaces a prefix of file:/// with just /."
      (if (string= (substring fname-or-url 0 8) "file:///")
	  (substring fname-or-url 7)
	fname-or-url))

    (defun evince-inverse-search (file linecol &rest ignored)
      (let* ((fname (un-urlify file))
	     (buf (find-file fname))
	     (line (car linecol))
	     (col (cadr linecol)))
	(if (null buf)
	    (message "[Synctex]: %s is not opened..." fname)
	  (switch-to-buffer buf)
	  (goto-line (car linecol))
	  (unless (= col -1)
	    (move-to-column col)))))

    (when (boundp 'dbus-message-type-method-call) nil t
	  (dbus-register-signal
	   :session nil "/org/gnome/evince/Window/0"
	   "org.gnome.evince.Window" "SyncSource"
	   'evince-inverse-search))
    )
#+end_src

* Mac用設定
** 設定全体
#+begin_src emacs-lisp :noweb yes
  (when (eq system-type 'darwin)
    <<mac-keybord-and-input-method-settings>>
    <<mac-fonts-settings>>
    <<mac-yatex-settings>>
  )
#+end_src

** Mac用キーボードと入力方式の設定

#+name: mac-keybord-and-input-method-settings
#+begin_src emacs-lisp :tangle no
  ;; option <-> meta
  (setq ns-command-modifier (quote meta))
  (setq ns-alternate-modifier (quote super))

  ;; システムへ修飾キーを渡さない
  (setq mac-pass-control-to-system nil)
  (setq mac-pass-command-to-system nil)
  (setq mac-pass-option-to-system nil)

  ;;; C-oで日本語切り替え
  (mac-input-method-mode t)
  (global-set-key "\C-o" 'toggle-input-method)

  ;; かな
  (mac-set-input-method-parameter
   "com.google.inputmethod.Japanese.base" 'cursor-color 'green)

  ;; 英数字
  (mac-set-input-method-parameter
   "com.google.inputmethod.Japanese.Roman" 'cursor-color 'red)

  ;; change cursor type
  (mac-set-input-method-parameter
   "com.google.inputmethod.Japanese.base" 'cursor-type 'box)
#+end_src

** Mac用フォントの設定

#+name: mac-fonts-settings
#+begin_src emacs-lisp :tangle no
  ;; ================================================================
  ;; Fonts
  ;; ================================================================

  ;; |あああああ|
  ;; |+-+-+-+-+-|
  ;; |imimimimim|

  ;; (when (x-list-fonts "Ricty")
  ;;   (let* ((size 14)
  ;;          (asciifont "Ricty")
  ;;          (jpfont "Ricty")
  ;;          (h (* size 10))
  ;;          (fontspec)
  ;;          (jp-fontspec))
  ;;     (set-face-attribute 'default nil :family asciifont :height h)
  ;;     (setq fontspec (font-spec :family asciifont))
  ;;     (setq jp-fontspec (font-spec :family jpfont))
  ;;     (set-fontset-font nil 'japanese-jisx0208 jp-fontspec)
  ;;     (set-fontset-font nil 'japanese-jisx0212 jp-fontspec)
  ;;     (set-fontset-font nil 'japanese-jisx0213-1 jp-fontspec)
  ;;     (set-fontset-font nil 'japanese-jisx0213-2 jp-fontspec)
  ;;     (set-fontset-font nil '(#x0080 . #x024F) fontspec)
  ;;     (set-fontset-font nil '(#x0370 . #x03FF) fontspec)))

#+end_src

** Mac用YaTeXの設定

#+name: mac-yatex-settings
#+begin_src emacs-lisp :tangle no
  (setq YaTeX-dvi2-command-ext-alist
	'(("Preview\\|TeXShop\\|TeXworks\\|Skim\\|mupdf\\|xpdf\\|Firefox\\|Adobe" . ".pdf")))
  (setq tex-command "/usr/texbin/ptex2pdf -l -ot '-synctex=1'")
  ;(setq tex-command "/usr/texbin/ptex2pdf -l -u -ot '-synctex=1'")
  ;(setq tex-command "/usr/local/bin/pdfplatex")
  ;(setq tex-command "/usr/local/bin/pdfplatex2")
  ;(setq tex-command "/usr/local/bin/pdfuplatex")
  ;(setq tex-command "/usr/local/bin/pdfuplatex2")
  ;(setq tex-command "/usr/texbin/pdflatex -synctex=1")
  ;(setq tex-command "/usr/texbin/lualatex -synctex=1")
  ;(setq tex-command "/usr/texbin/luajitlatex -synctex=1")
  ;(setq tex-command "/usr/texbin/xelatex -synctex=1")
  ;(setq tex-command "/usr/texbin/latexmk")
  ;(setq tex-command "/usr/texbin/latexmk -e '$latex=q/platex %O -synctex=1 %S/' -e '$bibtex=q/pbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
  ;(setq tex-command "/usr/texbin/latexmk -e '$latex=q/platex %O -synctex=1 %S/' -e '$bibtex=q/pbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -g > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps")
  ;(setq tex-command "/usr/texbin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvipdf=q/dvipdfmx %O -o %D %S/' -norc -gg -pdfdvi")
  ;(setq tex-command "/usr/texbin/latexmk -e '$latex=q/uplatex %O -synctex=1 %S/' -e '$bibtex=q/upbibtex %O %B/' -e '$makeindex=q/mendex %O -o %D %S/' -e '$dvips=q/dvips %O -z -f %S | convbkmk -u > %D/' -e '$ps2pdf=q/ps2pdf %O %S %D/' -norc -gg -pdfps")
  ;(setq tex-command "/usr/texbin/latexmk -e '$pdflatex=q/pdflatex %O -synctex=1 %S/' -e '$bibtex=q/bibtex %O %B/' -e '$makeindex=q/makeindex %O -o %D %S/' -norc -gg -pdf")
  ;(setq tex-command "/usr/texbin/latexmk -e '$pdflatex=q/lualatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -lualatex")
  ;(setq tex-command "/usr/texbin/latexmk -e '$pdflatex=q/luajitlatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -lualatex")
  ;(setq tex-command "/usr/texbin/latexmk -e '$pdflatex=q/xelatex %O -synctex=1 %S/' -e '$bibtex=q/bibtexu %O %B/' -e '$makeindex=q/texindy %O -o %D %S/' -norc -gg -xelatex")
  (setq bibtex-command (cond ((string-match "uplatex\\|-u" tex-command) "/usr/texbin/upbibtex")
			     ((string-match "platex" tex-command) "/usr/texbin/pbibtex")
			     ((string-match "lualatex\\|luajitlatex\\|xelatex" tex-command) "/usr/texbin/bibtexu")
			     ((string-match "pdflatex\\|latex" tex-command) "/usr/texbin/bibtex")
			     (t "/usr/texbin/pbibtex")))
  (setq makeindex-command (cond ((string-match "uplatex\\|-u" tex-command) "/usr/texbin/mendex")
				((string-match "platex" tex-command) "/usr/texbin/mendex")
				((string-match "lualatex\\|luajitlatex\\|xelatex" tex-command) "/usr/texbin/texindy")
				((string-match "pdflatex\\|latex" tex-command) "/usr/texbin/makeindex")
				(t "/usr/texbin/mendex")))
  ;(setq dvi2-command "/usr/bin/open -a Preview")
  (setq dvi2-command "/usr/bin/open -a Skim")
  ;(setq dvi2-command "/usr/bin/open -a TeXShop")
  ;(setq dvi2-command "/usr/bin/open -a TeXworks")
  ;(setq dvi2-command "/usr/bin/open -a Firefox")
  (setq dviprint-command-format "/usr/bin/open -a \"Adobe Reader\" `echo %s | sed -e \"s/\\.[^.]*$/\\.pdf/\"`")

  (defun skim-forward-search ()
    (interactive)
    (progn
      (process-kill-without-query
       (start-process
	"displayline"
	nil
	"/Applications/Skim.app/Contents/SharedSupport/displayline"
	(number-to-string (save-restriction
			    (widen)
			    (count-lines (point-min) (point))))
	(expand-file-name
	 (concat (file-name-sans-extension (or YaTeX-parent-file
					       (save-excursion
						 (YaTeX-visit-main t)
						 buffer-file-name)))
		 ".pdf"))
	buffer-file-name))))
#+end_src

* Windows用設定
** TODO 設定全体

#+begin_src emacs-lisp :noweb yes
  (when (or (eq system-type 'windows-nt)
	    (eq system-type 'cygwin))
    <<windows-settings>>
  )
#+end_src

** Windows用設定

#+name: windows-settings
#+begin_src emacs-lisp :tangle no
  (setq file-name-coding-system 'cp932)

  ;; Ctrl-gとかでベルを鳴らさないようにします。
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)

  ;;;** 標準IMEの設定
  (setq default-input-method "W32-IME")

  ;;;** IMEの初期化
  (w32-ime-initialize)

  ;;;** IME状態のモードライン表示
  (setq-default w32-ime-mode-line-state-indicator "[--]")
  (setq w32-ime-mode-line-state-indicator-list '("[--]" "[あ]" "[--]"))

  ;;;** IME OFF時の初期カーソルカラー
  (set-cursor-color "red")

  ;;;** IME ON/OFF時のカーソルカラー
  (add-hook 'input-method-activate-hook
	    (lambda() (set-cursor-color "green")))
  (add-hook 'input-method-inactivate-hook
	    (lambda() (set-cursor-color "red")))

  ;;;** バッファ切り替え時にIME状態を引き継ぐ
  (setq w32-ime-buffer-switch-p nil)

  ;;;** Ctrl-Oでトグルするようにする
  (global-set-key (kbd "C-o") 'toggle-input-method)

  ;; ;; cp932エンコード時の表示を「P」とする
  ;; (coding-system-put 'cp932 :mnemonic ?P)
  ;; (coding-system-put 'cp932-dos :mnemonic ?P)
  ;; (coding-system-put 'cp932-unix :mnemonic ?P)
  ;; (coding-system-put 'cp932-mac :mnemonic ?P)
#+end_src

* 文芸的プログラミング

#' = function
- [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Anonymous-Functions.html][Anonymous Functions - GNU Emacs Lisp Reference Manual]]

[[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Babel: Introduction]]

Following codes do not work well in org-mode runing with C-c C-c.

#+begin_src emacs-lisp
  (setq dot-file-dir (file-name-directory
		       (or (buffer-file-name) load-file-name)))
  (setq org-file-dir (expand-file-name "plugins-enabled" dot-file-dir))
  (mapc #'org-babel-load-file (directory-files org-file-dir t "\\.org$"))
#+end_src

* 後処理
** 完了表示

#+begin_src emacs-lisp
  (message "%s" "%% init.elは完了しました %%")
#+end_src

** フッタコメント
#+begin_src emacs-lisp
  ;;; init.el ends here
#+end_src
